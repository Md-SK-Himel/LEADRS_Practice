// <auto-generated />
using System;
using LEADRS_NEW_DBFirst.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LEADRS_NEW_DBFirst.Migrations
{
    [DbContext(typeof(LeadrsCoreDevNewContext))]
    [Migration("20230607120141_ColumnMismatchFiltered")]
    partial class ColumnMismatchFiltered
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.AccessLog", b =>
                {
                    b.Property<int>("AccessLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccessLogId"));

                    b.Property<DateTime>("AccessDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Action")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("City")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientIdentifier")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ContinentCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("EntityName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("IPAddress");

                    b.Property<bool>("IsAjaxRequest")
                        .HasColumnType("bit");

                    b.Property<string>("Latitiude")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Longtitude")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("OwningOrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("OwningUserId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RegionCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("RequestUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("RequestURL");

                    b.Property<int>("RootEntityId")
                        .HasColumnType("int");

                    b.Property<string>("RootEntityName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SubEntityId")
                        .HasColumnType("int");

                    b.Property<string>("SubEntityName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Zip")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.HasKey("AccessLogId");

                    b.ToTable("AccessLog");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.ActiveSession", b =>
                {
                    b.Property<int>("ActiveSessionsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActiveSessionsId"));

                    b.Property<string>("BrowserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Device")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActiveSessionsId");

                    b.ToTable("ActiveSessions");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.AdditionalOffense", b =>
                {
                    b.Property<int>("AdditionalOffenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdditionalOffenseId"));

                    b.Property<string>("AdditionalOffeseDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CaseOffenseId")
                        .HasColumnType("int");

                    b.HasKey("AdditionalOffenseId");

                    b.HasIndex(new[] { "CaseOffenseId" }, "IX_AdditionalOffenses_CaseOffenseId");

                    b.ToTable("AdditionalOffenses", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.AggregatedCounter", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ExpireAt")
                        .HasColumnType("datetime");

                    b.Property<long>("Value")
                        .HasColumnType("bigint");

                    b.HasKey("Key")
                        .HasName("PK_HangFire_CounterAggregated");

                    b.HasIndex(new[] { "ExpireAt" }, "IX_HangFire_AggregatedCounter_ExpireAt")
                        .HasFilter("([ExpireAt] IS NOT NULL)");

                    b.ToTable("AggregatedCounter", "HangFire");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.AuditChange", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Audit_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditId"));

                    b.Property<string>("AuditAction")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("Audit_Action");

                    b.Property<string>("AuditObject")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("Audit_Object");

                    b.Property<string>("Changes")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("KeyId")
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("Key_Id");

                    b.Property<string>("SessionId")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Session_Id");

                    b.Property<string>("UpdatedByUser")
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("Updated_By_User");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("Updated_On");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("User_Name");

                    b.HasKey("AuditId")
                        .HasName("pk_AuditChanges");

                    b.ToTable("AuditChanges");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.AuthType", b =>
                {
                    b.Property<int>("AuthTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthTypeId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("AuthTypeName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("AuthTypeId");

                    b.ToTable("AuthType");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.AvGetCboNcicTransportMake", b =>
                {
                    b.Property<int>("Active")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NcicCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("NcicTransportMakeId")
                        .HasColumnType("int");

                    b.Property<int>("TransportTypeId")
                        .HasColumnType("int");

                    b.ToTable((string)null);

                    b.ToView("AV_GET_CBO_NCIC_TRANSPORT_MAKE", (string)null);
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.AvGetCboNcicVehicleModel", b =>
                {
                    b.Property<int>("Active")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("MakeId")
                        .HasColumnType("int");

                    b.Property<string>("NcicCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("NcicVehicleModelId")
                        .HasColumnType("int");

                    b.Property<string>("OrigDescription")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.ToTable((string)null);

                    b.ToView("AV_GET_CBO_NCIC_VEHICLE_MODEL", (string)null);
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.CaseHeader", b =>
                {
                    b.Property<int>("CaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CaseId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("AgencyCaseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ApprovedByOfficerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ArrestNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CaseOwnerAgency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CaseOwnerBadge")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CaseOwnerDepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("CaseOwnerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CaseOwnerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CaseOwnerRank")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEntered")
                        .HasColumnType("datetime2");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Grid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsTrainingPurpose")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int?>("LockedByOfficerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LockedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModeId")
                        .HasColumnType("int");

                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OfficerId")
                        .HasColumnType("int");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<bool?>("PaidTxDot")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("PaidTxDOT")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<string>("ProbableCause")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("ServiceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int?>("StepGrantTypeId")
                        .HasColumnType("int");

                    b.Property<string>("UniqueId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.HasKey("CaseId");

                    b.HasIndex(new[] { "ModeId" }, "IX_CaseHeaders_ModeId");

                    b.HasIndex(new[] { "StatusId" }, "IX_CaseHeaders_StatusId");

                    b.ToTable("CaseHeaders", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.CaseOffense", b =>
                {
                    b.Property<int>("CaseOffenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CaseOffenseId"));

                    b.Property<string>("ArrestAddress1")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ArrestAddress2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ArrestAddressGroupId")
                        .HasColumnType("int");

                    b.Property<string>("ArrestCity")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ArrestCountyId")
                        .HasColumnType("int");

                    b.Property<double>("ArrestLat")
                        .HasColumnType("float");

                    b.Property<double>("ArrestLng")
                        .HasColumnType("float");

                    b.Property<int?>("ArrestStateId")
                        .HasColumnType("int");

                    b.Property<string>("ArrestZipCode")
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<bool?>("ChkOffAddressOfficerGeo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<bool?>("ChkUpdateArrestInfo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<string>("ContainersDesc")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("DateOfArrest")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBooking")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfEventEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfOff")
                        .HasColumnType("datetime2");

                    b.Property<string>("Explanation")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("OffAddress1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OffAddress2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("OffAddressGroupId")
                        .HasColumnType("int");

                    b.Property<string>("OffCity")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("OffCountyId")
                        .HasColumnType("int");

                    b.Property<double>("OffLat")
                        .HasColumnType("float");

                    b.Property<double>("OffLng")
                        .HasColumnType("float");

                    b.Property<int?>("OffStateId")
                        .HasColumnType("int");

                    b.Property<string>("OffZipCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("OffenseId")
                        .HasColumnType("int");

                    b.Property<bool>("OpenContainers")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("TimeOfArrest")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TimeOfBooking")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TimeOfEventEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TimeOfOff")
                        .HasColumnType("datetime2");

                    b.HasKey("CaseOffenseId");

                    b.HasIndex(new[] { "ArrestAddressGroupId" }, "IX_CaseOffenses_ArrestAddressGroupId");

                    b.HasIndex(new[] { "ArrestCountyId" }, "IX_CaseOffenses_ArrestCountyId");

                    b.HasIndex(new[] { "ArrestStateId" }, "IX_CaseOffenses_ArrestStateId");

                    b.HasIndex(new[] { "CaseId" }, "IX_CaseOffenses_CaseId");

                    b.HasIndex(new[] { "OffAddressGroupId" }, "IX_CaseOffenses_OffAddressGroupId");

                    b.HasIndex(new[] { "OffCountyId" }, "IX_CaseOffenses_OffCountyId");

                    b.HasIndex(new[] { "OffStateId" }, "IX_CaseOffenses_OffStateId");

                    b.HasIndex(new[] { "OffenseId" }, "IX_CaseOffenses_OffenseId");

                    b.ToTable("CaseOffenses", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.CaseOutcome", b =>
                {
                    b.Property<int>("CaseOutcomeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CaseOutcomeId"));

                    b.Property<int?>("AcceptedOffenseId")
                        .HasColumnType("int");

                    b.Property<bool?>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(1)))");

                    b.Property<bool?>("CaseDismissed")
                        .HasColumnType("bit");

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<string>("CaseNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("CaseOutcomeDismissalId")
                        .HasColumnType("int");

                    b.Property<int?>("CaseOutcomePleaId")
                        .HasColumnType("int");

                    b.Property<int?>("CaseOutcomeTrialId")
                        .HasColumnType("int");

                    b.Property<bool?>("CasePlea")
                        .HasColumnType("bit");

                    b.Property<bool?>("CaseTrial")
                        .HasColumnType("bit");

                    b.Property<bool?>("ChargeAccepted")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("('2023-02-27T14:09:32.0688878+05:30')");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("OutcomeNarrative")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferenceNumber")
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)");

                    b.Property<bool?>("Submitted")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CaseOutcomeId");

                    b.HasIndex(new[] { "OrganizationId" }, "IX_CaseOutcomes_OrganizationId");

                    b.ToTable("CaseOutcomes");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.CaseVehicle", b =>
                {
                    b.Property<int>("CaseVehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CaseVehicleId"));

                    b.Property<int?>("BoatHullShapeId")
                        .HasColumnType("int");

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<string>("HoldReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("Impounded")
                        .HasColumnType("bit");

                    b.Property<string>("ImpoundedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LicensePlate")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LicenseYear")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("StoredAt")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("VehicleColorId")
                        .HasColumnType("int");

                    b.Property<bool?>("VehicleCommercial")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<string>("VehicleCondition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("VehicleHazMat")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<int?>("VehicleMakeId")
                        .HasColumnType("int");

                    b.Property<int?>("VehicleModelId")
                        .HasColumnType("int");

                    b.Property<bool>("VehiclePlacedOnHold")
                        .HasColumnType("bit");

                    b.Property<int?>("VehicleStyleId")
                        .HasColumnType("int");

                    b.Property<int?>("VehicleTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("VehicleWatercraftId")
                        .HasColumnType("int");

                    b.Property<int?>("VehicleWatercraftOwnerId")
                        .HasColumnType("int");

                    b.Property<string>("Vin")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("VIN");

                    b.Property<string>("Year")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.HasKey("CaseVehicleId");

                    b.HasIndex(new[] { "BoatHullShapeId" }, "IX_CaseVehicles_BoatHullShapeId");

                    b.HasIndex(new[] { "CaseId" }, "IX_CaseVehicles_CaseId");

                    b.HasIndex(new[] { "StateId" }, "IX_CaseVehicles_StateId");

                    b.HasIndex(new[] { "VehicleColorId" }, "IX_CaseVehicles_VehicleColorId");

                    b.HasIndex(new[] { "VehicleMakeId" }, "IX_CaseVehicles_VehicleMakeId");

                    b.HasIndex(new[] { "VehicleModelId" }, "IX_CaseVehicles_VehicleModelId");

                    b.HasIndex(new[] { "VehicleStyleId" }, "IX_CaseVehicles_VehicleStyleId");

                    b.HasIndex(new[] { "VehicleTypeId" }, "IX_CaseVehicles_VehicleTypeId");

                    b.ToTable("CaseVehicles", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.CaseVehiclePassenger", b =>
                {
                    b.Property<int>("CaseVehiclePassengerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CaseVehiclePassengerId"));

                    b.Property<string>("Address1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Address2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("AddressGroupId")
                        .HasColumnType("int");

                    b.Property<bool>("Arrested")
                        .HasColumnType("bit");

                    b.Property<int>("CaseVehicleId")
                        .HasColumnType("int");

                    b.Property<string>("Charge")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Comments")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("CountyId")
                        .HasColumnType("int");

                    b.Property<string>("CpscaseNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CPSCaseNumber");

                    b.Property<string>("CpsnotExplanation")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CPSNotExplanation");

                    b.Property<bool>("Cpsnotified")
                        .HasColumnType("bit")
                        .HasColumnName("CPSNotified");

                    b.Property<string>("CpsnotifiedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CPSNotifiedBy");

                    b.Property<string>("Dlnumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DLNumber");

                    b.Property<int?>("DlstateId")
                        .HasColumnType("int")
                        .HasColumnName("DLStateId");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("datetime2")
                        .HasColumnName("DOB");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GenderId")
                        .HasColumnType("int");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ID");

                    b.Property<int>("Intoxicated")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Lat")
                        .HasColumnType("float");

                    b.Property<double>("Lng")
                        .HasColumnType("float");

                    b.Property<string>("MothersMaidenName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RaceId")
                        .HasColumnType("int");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.Property<bool>("WearHelmet")
                        .HasColumnType("bit");

                    b.Property<bool>("WearSafetyBelt")
                        .HasColumnType("bit");

                    b.Property<string>("WhereSeated")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("CaseVehiclePassengerId");

                    b.HasIndex(new[] { "AddressGroupId" }, "IX_CaseVehiclePassengers_AddressGroupId");

                    b.HasIndex(new[] { "CaseVehicleId" }, "IX_CaseVehiclePassengers_CaseVehicleId");

                    b.HasIndex(new[] { "CountyId" }, "IX_CaseVehiclePassengers_CountyId");

                    b.HasIndex(new[] { "GenderId" }, "IX_CaseVehiclePassengers_GenderId");

                    b.HasIndex(new[] { "RaceId" }, "IX_CaseVehiclePassengers_RaceId");

                    b.HasIndex(new[] { "StateId" }, "IX_CaseVehiclePassengers_StateId");

                    b.ToTable("CaseVehiclePassengers", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.CaseViolation", b =>
                {
                    b.Property<int>("CaseViolationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CaseViolationId"));

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArrest")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCitation")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOther")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWarning")
                        .HasColumnType("bit");

                    b.Property<string>("Narrative")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("ViolationId")
                        .HasColumnType("int");

                    b.HasKey("CaseViolationId");

                    b.HasIndex(new[] { "CaseId" }, "IX_CaseViolations_CaseId");

                    b.HasIndex(new[] { "ViolationId" }, "IX_CaseViolations_ViolationId");

                    b.ToTable("CaseViolations", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.ClerkSupplement", b =>
                {
                    b.Property<int>("ClerkSupplementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClerkSupplementID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClerkSupplementId"));

                    b.Property<bool?>("Active")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(1)))");

                    b.Property<int>("CaseId")
                        .HasColumnType("int")
                        .HasColumnName("CaseID");

                    b.Property<string>("CaseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OfficerId")
                        .HasColumnType("int")
                        .HasColumnName("OfficerID");

                    b.Property<int?>("OrganisationId")
                        .HasColumnType("int")
                        .HasColumnName("OrganisationID");

                    b.Property<bool?>("Submitted")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<string>("Supplement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ClerkSupplementId");

                    b.HasIndex(new[] { "OrganisationId" }, "IX_ClerkSupplement_OrganisationID");

                    b.ToTable("ClerkSupplement");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.Condition", b =>
                {
                    b.Property<int>("ConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConditionId"));

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<string>("Cause")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionTrafficLanes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HowDefendantWasObserved")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InjuryId")
                        .HasColumnType("int");

                    b.Property<int?>("LightConditionId")
                        .HasColumnType("int");

                    b.Property<int?>("ObservedSpeed")
                        .HasColumnType("int");

                    b.Property<bool>("OfficerRadarTrained")
                        .HasColumnType("bit");

                    b.Property<bool?>("ParksAndWildLifeStop")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<int?>("PostedSpeedLimit")
                        .HasColumnType("int");

                    b.Property<bool>("RadarChecked")
                        .HasColumnType("bit");

                    b.Property<int?>("RadarTypeId")
                        .HasColumnType("int");

                    b.Property<bool?>("ResistanceNone")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool>("ResistancePassive")
                        .HasColumnType("bit");

                    b.Property<bool>("ResistancePhysical")
                        .HasColumnType("bit");

                    b.Property<bool>("ResistanceVerbalThreat")
                        .HasColumnType("bit");

                    b.Property<int?>("RoadConditionId")
                        .HasColumnType("int");

                    b.Property<bool>("RoadMarked")
                        .HasColumnType("bit");

                    b.Property<int?>("RoadSurfaceId")
                        .HasColumnType("int");

                    b.Property<bool>("SpeedAsFactor")
                        .HasColumnType("bit");

                    b.Property<string>("StatementOnInitialContact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SurfaceId")
                        .HasColumnType("int");

                    b.Property<bool>("SuspectResistance")
                        .HasColumnType("bit");

                    b.Property<int?>("WaterSurfaceId")
                        .HasColumnType("int");

                    b.Property<int?>("WaveHeightId")
                        .HasColumnType("int");

                    b.Property<int?>("WeatherId")
                        .HasColumnType("int");

                    b.Property<int?>("WindSpeedId")
                        .HasColumnType("int");

                    b.Property<int?>("ZoneId")
                        .HasColumnType("int");

                    b.HasKey("ConditionId");

                    b.HasIndex(new[] { "CaseId" }, "IX_Conditions_CaseId");

                    b.HasIndex(new[] { "InjuryId" }, "IX_Conditions_InjuryId");

                    b.HasIndex(new[] { "LightConditionId" }, "IX_Conditions_LightConditionId");

                    b.HasIndex(new[] { "RadarTypeId" }, "IX_Conditions_RadarTypeId");

                    b.HasIndex(new[] { "RoadConditionId" }, "IX_Conditions_RoadConditionId");

                    b.HasIndex(new[] { "RoadSurfaceId" }, "IX_Conditions_RoadSurfaceId");

                    b.HasIndex(new[] { "SurfaceId" }, "IX_Conditions_SurfaceId");

                    b.HasIndex(new[] { "WeatherId" }, "IX_Conditions_WeatherId");

                    b.HasIndex(new[] { "ZoneId" }, "IX_Conditions_ZoneId");

                    b.ToTable("Conditions", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.ConditionReasonForStop", b =>
                {
                    b.Property<int>("ConditionReasonForStopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConditionReasonForStopId"));

                    b.Property<bool?>("Checked")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<int>("ConditionId")
                        .HasColumnType("int");

                    b.Property<int>("ReasonForStopId")
                        .HasColumnType("int");

                    b.Property<string>("ReasonForStopText")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConditionReasonForStopId");

                    b.HasIndex(new[] { "ConditionId" }, "IX_ConditionReasonForStops_ConditionId");

                    b.HasIndex(new[] { "ReasonForStopId" }, "IX_ConditionReasonForStops_ReasonForStopId");

                    b.ToTable("ConditionReasonForStops", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.Counter", b =>
                {
                    b.Property<DateTime?>("ExpireAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasIndex(new[] { "Key" }, "CX_HangFire_Counter");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex(new[] { "Key" }, "CX_HangFire_Counter"));

                    b.ToTable("Counter", "HangFire");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.DRECase", b =>
                {
                    b.Property<int>("DRECaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DRECaseId"));

                    b.Property<DateTime?>("ActualTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("AgencyCaseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AssociatedCaseId")
                        .HasColumnType("int");

                    b.Property<string>("CaseOwnerAgency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CaseOwnerBadge")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CaseOwnerDepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("CaseOwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CaseOwnerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CaseOwnerRank")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("CrashFatal")
                        .HasColumnType("bit");

                    b.Property<bool?>("CrashInjury")
                        .HasColumnType("bit");

                    b.Property<bool?>("CrashNone")
                        .HasColumnType("bit");

                    b.Property<bool?>("CrashProperty")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DefendantTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<bool?>("DiabeticEpileptic")
                        .HasColumnType("bit");

                    b.Property<string>("DiabeticEpilepticDesc")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("DreNotifiedId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("DreNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DreRequestedId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("DreRoleId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("DreTypeId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("DrinkingHowMuch")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DrinkingTime")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("DrinkingToday")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("EatenToday")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("EatenWhen")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EvaluationAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("EvaluatorId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime?>("EvaulationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("InitialAngleNystagums")
                        .HasColumnType("int");

                    b.Property<string>("InitialObservationOfSubject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InitialPupilSizeL")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("InitialPupilSizeR")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<bool?>("Insulin")
                        .HasColumnType("bit");

                    b.Property<string>("InsulinDesc")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastSleep")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("LocationId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<bool?>("MedicationsDrug")
                        .HasColumnType("bit");

                    b.Property<string>("MedicationsDrugDesc")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("MirandaDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("MirandaEnglish")
                        .HasColumnType("bit");

                    b.Property<bool?>("MirandaGiven")
                        .HasColumnType("bit");

                    b.Property<string>("MirandaGivenBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("MirandaSpanish")
                        .HasColumnType("bit");

                    b.Property<bool?>("MirandaUnderstood")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("NotifyDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("NotifyTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("OffenseAddress1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OffenseAddress2")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OffenseCity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("OffenseCounty")
                        .HasColumnType("int");

                    b.Property<double?>("OffenseLat")
                        .HasColumnType("float");

                    b.Property<double?>("OffenseLng")
                        .HasColumnType("float");

                    b.Property<int?>("OffenseState")
                        .HasColumnType("int");

                    b.Property<string>("OffenseZip")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool?>("PhysicalDefects")
                        .HasColumnType("bit");

                    b.Property<string>("PhysicalDefectsDesc")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PulseRate1")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PulseRate2")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PulseRate3")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PulseSite1")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PulseSite2")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PulseSite3")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("PulseTime1")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PulseTime2")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PulseTime3")
                        .HasColumnType("datetime2");

                    b.Property<string>("RollingLogNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("SickInjured")
                        .HasColumnType("bit");

                    b.Property<string>("SickInjuredDesc")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("SleepHowLong")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<bool?>("UnderCare")
                        .HasColumnType("bit");

                    b.Property<string>("UnderCareDesc")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UniqueId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DRECaseId");

                    b.HasIndex(new[] { "DreNotifiedId" }, "IX_DRE_CASES_DreNotifiedId");

                    b.HasIndex(new[] { "DreRequestedId" }, "IX_DRE_CASES_DreRequestedId");

                    b.HasIndex(new[] { "DreRoleId" }, "IX_DRE_CASES_DreRoleId");

                    b.HasIndex(new[] { "DreTypeId" }, "IX_DRE_CASES_DreTypeId");

                    b.HasIndex(new[] { "StatusId" }, "IX_DRE_CASES_StatusId");

                    b.HasIndex(new[] { "UniqueId" }, "IX_DRE_CASES_UniqueId")
                        .IsUnique()
                        .HasFilter("([UniqueId] IS NOT NULL)");

                    b.ToTable("DRE_CASES", "DRE");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.DreCaseArrestingOfficerFST", b =>
                {
                    b.Property<int>("ArrestingOfficerFSTId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArrestingOfficerFSTId"));

                    b.Property<int?>("DRECaseId")
                        .HasColumnType("int");

                    b.Property<int>("DreCaseId")
                        .HasColumnType("int");

                    b.Property<int?>("HGNCluesLeft")
                        .HasColumnType("int");

                    b.Property<int?>("HGNCluesRight")
                        .HasColumnType("int");

                    b.Property<int?>("HGNCluesTotal")
                        .HasColumnType("int");

                    b.Property<bool?>("HGNDistinctMaxDevLeft")
                        .HasColumnType("bit");

                    b.Property<bool?>("HGNDistinctMaxDevRight")
                        .HasColumnType("bit");

                    b.Property<bool?>("HGNLackOfPursuitLeft")
                        .HasColumnType("bit");

                    b.Property<bool?>("HGNLackOfPursuitRight")
                        .HasColumnType("bit");

                    b.Property<bool?>("HGNOnsetPrior45Left")
                        .HasColumnType("bit");

                    b.Property<bool?>("HGNOnsetPrior45Right")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsHGNVerticalNyst")
                        .HasColumnType("bit");

                    b.Property<int?>("OneLegClues")
                        .HasColumnType("int");

                    b.Property<bool?>("OneLegHopps")
                        .HasColumnType("bit");

                    b.Property<bool?>("OneLegPutFootDown")
                        .HasColumnType("bit");

                    b.Property<bool?>("OneLegSways")
                        .HasColumnType("bit");

                    b.Property<bool?>("OneLegUsesArms")
                        .HasColumnType("bit");

                    b.Property<bool?>("WalkTurnCannotBalance")
                        .HasColumnType("bit");

                    b.Property<int?>("WalkTurnClues")
                        .HasColumnType("int");

                    b.Property<bool?>("WalkTurnImproperTurn")
                        .HasColumnType("bit");

                    b.Property<bool?>("WalkTurnMissHeelToe")
                        .HasColumnType("bit");

                    b.Property<bool?>("WalkTurnRaisesArms")
                        .HasColumnType("bit");

                    b.Property<bool?>("WalkTurnStartSoon")
                        .HasColumnType("bit");

                    b.Property<bool?>("WalkTurnStepOffLine")
                        .HasColumnType("bit");

                    b.Property<bool?>("WalkTurnStopWalking")
                        .HasColumnType("bit");

                    b.Property<bool?>("WalkTurnWrongNumberSteps")
                        .HasColumnType("bit");

                    b.HasKey("ArrestingOfficerFSTId");

                    b.HasIndex("DRECaseId")
                        .IsUnique()
                        .HasFilter("[DRECaseId] IS NOT NULL");

                    b.HasIndex(new[] { "DreCaseId" }, "IX_DRE_CASE_AO_FST_DreCaseId")
                        .IsUnique();

                    b.ToTable("DRE_CASE_AO_FST", "DRE");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.DreCaseArrestingOfficerInterview", b =>
                {
                    b.Property<int>("InterviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InterviewId"));

                    b.Property<int?>("DRECaseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateTimeOfArrest")
                        .HasColumnType("datetime2");

                    b.Property<int>("DreCaseId")
                        .HasColumnType("int");

                    b.Property<string>("OfficerInterview")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SubjectAttitudCompareDesc")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("SubjectAttitudeDesc")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool?>("SubjectComplainedInjury")
                        .HasColumnType("bit");

                    b.Property<string>("SubjectComplainedInjuryDesc")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("SubjectDrivingVehicleDesc")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool?>("SubjectFoundBallonPlastic")
                        .HasColumnType("bit");

                    b.Property<string>("SubjectFoundBallonPlasticDesc")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool?>("SubjectFoundDrugResidue")
                        .HasColumnType("bit");

                    b.Property<string>("SubjectFoundDrugResidueDesc")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool?>("SubjectFoundInjectionMaterial")
                        .HasColumnType("bit");

                    b.Property<string>("SubjectFoundInjectionMaterialDesc")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool?>("SubjectFoundMaterial")
                        .HasColumnType("bit");

                    b.Property<string>("SubjectFoundMaterialDesc")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool?>("SubjectFoundPrescriptionBottles")
                        .HasColumnType("bit");

                    b.Property<string>("SubjectFoundPrescriptionBottlesDesc")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool?>("SubjectInhalingSubstance")
                        .HasColumnType("bit");

                    b.Property<string>("SubjectInhalingSubstanceDesc")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool?>("SubjectMentionPrescription")
                        .HasColumnType("bit");

                    b.Property<string>("SubjectMentionPrescriptionDesc")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool?>("SubjectOpertingVehicle")
                        .HasColumnType("bit");

                    b.Property<string>("SubjectOpertingVehicleDesc")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("SubjectRespondToOfficer")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("SubjectRespondingStopDesc")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool?>("SubjectSeenSmokeDrink")
                        .HasColumnType("bit");

                    b.Property<string>("SubjectSeenSmokeDrinkDesc")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool?>("SubjectSpeechAppearSlurred")
                        .HasColumnType("bit");

                    b.Property<string>("SubjectSpeechAppearSlurredDesc")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool?>("SubjectTryConcealOrThrowMaterial")
                        .HasColumnType("bit");

                    b.Property<string>("SubjectTryConcealOrThrowMaterialDesc")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool?>("SubjectUsedSteetNameDrug")
                        .HasColumnType("bit");

                    b.Property<string>("SubjectUsedSteetNameDrugDesc")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool?>("SubjectVehicleCrashed")
                        .HasColumnType("bit");

                    b.Property<string>("SubjectVehicleCrashedDesc")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("InterviewId");

                    b.HasIndex("DRECaseId")
                        .IsUnique()
                        .HasFilter("[DRECaseId] IS NOT NULL");

                    b.HasIndex(new[] { "DreCaseId" }, "IX_DRE_CASE_AO_INTERVIEWS_DreCaseId")
                        .IsUnique();

                    b.ToTable("DRE_CASE_AO_INTERVIEWS", "DRE");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.DreCaseArrestingOfficerObservation", b =>
                {
                    b.Property<int>("ObservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ObservationId"));

                    b.Property<bool?>("AdditionalBreathPerformed")
                        .HasColumnType("bit");

                    b.Property<bool>("AttitudeApologetic")
                        .HasColumnType("bit");

                    b.Property<bool>("AttitudeCocky")
                        .HasColumnType("bit");

                    b.Property<bool>("AttitudeCombative")
                        .HasColumnType("bit");

                    b.Property<bool>("AttitudeCooperative")
                        .HasColumnType("bit");

                    b.Property<bool>("AttitudeIndifferent")
                        .HasColumnType("bit");

                    b.Property<bool>("AttitudeUnCooperative")
                        .HasColumnType("bit");

                    b.Property<decimal?>("BAC")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool>("BalanceFallingDown")
                        .HasColumnType("bit");

                    b.Property<bool>("BalanceNeededSupport")
                        .HasColumnType("bit");

                    b.Property<bool>("BalanceNormal")
                        .HasColumnType("bit");

                    b.Property<bool>("BalanceSwaying")
                        .HasColumnType("bit");

                    b.Property<bool>("BalanceUnsteady")
                        .HasColumnType("bit");

                    b.Property<string>("BreathInstrumentNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool?>("BreathRefused")
                        .HasColumnType("bit");

                    b.Property<string>("BreathResults")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("ClothingDisorderly")
                        .HasColumnType("bit");

                    b.Property<bool>("ClothingOrderly")
                        .HasColumnType("bit");

                    b.Property<bool>("ClothingSoiled")
                        .HasColumnType("bit");

                    b.Property<bool>("ClothingStained")
                        .HasColumnType("bit");

                    b.Property<bool>("ClothingTorn")
                        .HasColumnType("bit");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("DRECaseId")
                        .HasColumnType("int");

                    b.Property<int>("DreCaseId")
                        .HasColumnType("int");

                    b.Property<bool?>("DrugCategoryCNSDepressant")
                        .HasColumnType("bit");

                    b.Property<bool?>("DrugCategoryCNSStimulants")
                        .HasColumnType("bit");

                    b.Property<bool?>("DrugCategoryCannabis")
                        .HasColumnType("bit");

                    b.Property<bool?>("DrugCategoryHallucinogents")
                        .HasColumnType("bit");

                    b.Property<bool?>("DrugCategoryInhalants")
                        .HasColumnType("bit");

                    b.Property<bool?>("DrugCategoryNarcoticAbalgestic")
                        .HasColumnType("bit");

                    b.Property<bool>("DrugCategoryPCP")
                        .HasColumnType("bit");

                    b.Property<string>("DrugReasonSuspected")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DrugSuspected")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("DrugWhySuspected")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("EyesDilated")
                        .HasColumnType("bit");

                    b.Property<bool>("EyesDroopyEyeLids")
                        .HasColumnType("bit");

                    b.Property<bool>("EyesNormal")
                        .HasColumnType("bit");

                    b.Property<bool>("EyesRed")
                        .HasColumnType("bit");

                    b.Property<bool>("EyesWatering")
                        .HasColumnType("bit");

                    b.Property<bool?>("InstrumentIntoxilyzer")
                        .HasColumnType("bit");

                    b.Property<bool?>("InstrumentNA")
                        .HasColumnType("bit");

                    b.Property<string>("InstrumentNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("InstrumentOther")
                        .HasColumnType("bit");

                    b.Property<bool?>("InstrumentPBT")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("InstrumentPBTDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("InstrumentPending")
                        .HasColumnType("bit");

                    b.Property<bool?>("InstrumentRefused")
                        .HasColumnType("bit");

                    b.Property<bool?>("InstrumentWarrant")
                        .HasColumnType("bit");

                    b.Property<bool>("SpeechIncoherent")
                        .HasColumnType("bit");

                    b.Property<bool>("SpeechNormal")
                        .HasColumnType("bit");

                    b.Property<bool>("SpeechSlowMumbled")
                        .HasColumnType("bit");

                    b.Property<bool>("SpeechSlurred")
                        .HasColumnType("bit");

                    b.Property<bool>("SpeechThickTongued")
                        .HasColumnType("bit");

                    b.Property<int?>("TypeAlcoholDrug")
                        .HasColumnType("int");

                    b.Property<int?>("TypeOfAlcohol")
                        .HasColumnType("int");

                    b.Property<string>("UnusualActions")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("WalkingFalling")
                        .HasColumnType("bit");

                    b.Property<bool>("WalkingHeavyFooted")
                        .HasColumnType("bit");

                    b.Property<bool>("WalkingNormal")
                        .HasColumnType("bit");

                    b.Property<bool>("WalkingStaggering")
                        .HasColumnType("bit");

                    b.Property<bool>("WalkingSwaying")
                        .HasColumnType("bit");

                    b.HasKey("ObservationId");

                    b.HasIndex("DRECaseId")
                        .IsUnique()
                        .HasFilter("[DRECaseId] IS NOT NULL");

                    b.HasIndex(new[] { "DreCaseId" }, "IX_DRE_CASES_AO_OBS_DreCaseId")
                        .IsUnique();

                    b.ToTable("DRE_CASES_AO_OBS", "DRE");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.DreCaseDarkRoom", b =>
                {
                    b.Property<int>("DreCaseDarkRoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DreCaseDarkRoomId"));

                    b.Property<int?>("DRECaseId")
                        .HasColumnType("int");

                    b.Property<string>("DarkL")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("DarkR")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("DirectL")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("DirectR")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<int>("DreCaseId")
                        .HasColumnType("int");

                    b.Property<bool?>("HippusObserveD")
                        .HasColumnType("bit");

                    b.Property<string>("LightL")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("LightR")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("LightReaction")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("NasalAreaClear")
                        .HasColumnType("bit");

                    b.Property<bool?>("NasalAreaRed")
                        .HasColumnType("bit");

                    b.Property<bool?>("NasalAreableeding")
                        .HasColumnType("bit");

                    b.Property<bool?>("NasalAreadeviated")
                        .HasColumnType("bit");

                    b.Property<bool?>("NasalAreaother")
                        .HasColumnType("bit");

                    b.Property<string>("NasalAreaothertxt")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("NasalAreawhite")
                        .HasColumnType("bit");

                    b.Property<bool?>("OralCavityDry")
                        .HasColumnType("bit");

                    b.Property<bool?>("OralCavityGreen")
                        .HasColumnType("bit");

                    b.Property<bool?>("OralCavityMarijuana")
                        .HasColumnType("bit");

                    b.Property<bool?>("OralCavityMissing")
                        .HasColumnType("bit");

                    b.Property<bool?>("OralCavityOther")
                        .HasColumnType("bit");

                    b.Property<string>("OralCavityOtherText")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("OralCavityRaised")
                        .HasColumnType("bit");

                    b.Property<bool?>("OralCavityRotten")
                        .HasColumnType("bit");

                    b.Property<bool?>("OralCavityclear")
                        .HasColumnType("bit");

                    b.Property<int?>("ReactionToLightId")
                        .HasColumnType("int");

                    b.Property<string>("ReboundEndL")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("ReboundEndR")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<bool?>("ReboundN")
                        .HasColumnType("bit");

                    b.Property<string>("ReboundStartL")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("ReboundStartR")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<bool?>("ReboundY")
                        .HasColumnType("bit");

                    b.Property<bool?>("UvLight")
                        .HasColumnType("bit");

                    b.HasKey("DreCaseDarkRoomId");

                    b.HasIndex("DRECaseId")
                        .IsUnique()
                        .HasFilter("[DRECaseId] IS NOT NULL");

                    b.HasIndex(new[] { "DreCaseId" }, "IX_DRE_CASES_DARK_ROOM_DreCaseId")
                        .IsUnique();

                    b.ToTable("DRE_CASES_DARK_ROOM", "DRE");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.DreCaseDefendant", b =>
                {
                    b.Property<int>("DreCaseDefendantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DreCaseDefendantId"));

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("ArrestingOfficerAgency")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ArrestingOfficerId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ArrestingOfficerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ArrestingOfficerTypeId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DRECaseId")
                        .HasColumnType("int");

                    b.Property<int>("DreCaseId")
                        .HasColumnType("int");

                    b.Property<int?>("EthnicityId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("RaceId")
                        .HasColumnType("int");

                    b.Property<int?>("SexId")
                        .HasColumnType("int");

                    b.HasKey("DreCaseDefendantId");

                    b.HasIndex("DRECaseId")
                        .IsUnique()
                        .HasFilter("[DRECaseId] IS NOT NULL");

                    b.HasIndex(new[] { "ArrestingOfficerTypeId" }, "IX_DRE_DEFENDANTS_ArrestingOfficerTypeId");

                    b.HasIndex(new[] { "DreCaseId" }, "IX_DRE_DEFENDANTS_DreCaseId")
                        .IsUnique();

                    b.ToTable("DRE_DEFENDANTS", "DRE");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.DreCaseFingerToNose", b =>
                {
                    b.Property<int>("DreCaseFingerToNoseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DreCaseFingerToNoseId"));

                    b.Property<bool?>("AlmostFell")
                        .HasColumnType("bit");

                    b.Property<bool?>("BodyTremors")
                        .HasColumnType("bit");

                    b.Property<int?>("DRECaseId")
                        .HasColumnType("int");

                    b.Property<int>("DreCaseId")
                        .HasColumnType("int");

                    b.Property<bool?>("EyelidTremors")
                        .HasColumnType("bit");

                    b.Property<bool?>("FtnBalanceGiven")
                        .HasColumnType("bit");

                    b.Property<string>("FtnNotes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("HandDown1")
                        .HasColumnType("bit");

                    b.Property<bool?>("HandDown2")
                        .HasColumnType("bit");

                    b.Property<bool?>("HandDown3")
                        .HasColumnType("bit");

                    b.Property<bool?>("HandDown4")
                        .HasColumnType("bit");

                    b.Property<bool?>("HandDown5")
                        .HasColumnType("bit");

                    b.Property<bool?>("HandDown6")
                        .HasColumnType("bit");

                    b.Property<bool?>("LegTremors")
                        .HasColumnType("bit");

                    b.Property<bool?>("MovedFinger1")
                        .HasColumnType("bit");

                    b.Property<bool?>("MovedFinger2")
                        .HasColumnType("bit");

                    b.Property<bool?>("MovedFinger3")
                        .HasColumnType("bit");

                    b.Property<bool?>("MovedFinger4")
                        .HasColumnType("bit");

                    b.Property<bool?>("MovedFinger5")
                        .HasColumnType("bit");

                    b.Property<bool?>("MovedFinger6")
                        .HasColumnType("bit");

                    b.Property<bool?>("MuscleTensions")
                        .HasColumnType("bit");

                    b.Property<bool?>("MuscleToneFlaccid")
                        .HasColumnType("bit");

                    b.Property<bool?>("MuscleToneRigid")
                        .HasColumnType("bit");

                    b.Property<bool?>("OpenedEyes")
                        .HasColumnType("bit");

                    b.Property<bool?>("OpenedEyes1")
                        .HasColumnType("bit");

                    b.Property<bool?>("OpenedEyes2")
                        .HasColumnType("bit");

                    b.Property<bool?>("OpenedEyes3")
                        .HasColumnType("bit");

                    b.Property<bool?>("OpenedEyes4")
                        .HasColumnType("bit");

                    b.Property<bool?>("OpenedEyes5")
                        .HasColumnType("bit");

                    b.Property<bool?>("OpenedEyes6")
                        .HasColumnType("bit");

                    b.Property<bool?>("Other")
                        .HasColumnType("bit");

                    b.Property<string>("OtherComments")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool?>("Sounds")
                        .HasColumnType("bit");

                    b.Property<bool?>("StartedUseWrongHand1")
                        .HasColumnType("bit");

                    b.Property<bool?>("StartedUseWrongHand2")
                        .HasColumnType("bit");

                    b.Property<bool?>("StartedUseWrongHand3")
                        .HasColumnType("bit");

                    b.Property<bool?>("StartedUseWrongHand4")
                        .HasColumnType("bit");

                    b.Property<bool?>("StartedUseWrongHand5")
                        .HasColumnType("bit");

                    b.Property<bool?>("StartedUseWrongHand6")
                        .HasColumnType("bit");

                    b.Property<bool?>("Sway1")
                        .HasColumnType("bit");

                    b.Property<bool?>("Sway2")
                        .HasColumnType("bit");

                    b.Property<bool?>("Sway3")
                        .HasColumnType("bit");

                    b.Property<bool?>("Sway4")
                        .HasColumnType("bit");

                    b.Property<bool?>("Sway5")
                        .HasColumnType("bit");

                    b.Property<bool?>("Sway6")
                        .HasColumnType("bit");

                    b.Property<bool?>("Swaying")
                        .HasColumnType("bit");

                    b.Property<bool?>("UnableToPerform")
                        .HasColumnType("bit");

                    b.Property<bool?>("UnableToStandStill")
                        .HasColumnType("bit");

                    b.Property<bool?>("UnderstoodInstructions")
                        .HasColumnType("bit");

                    b.Property<bool?>("UsedArms")
                        .HasColumnType("bit");

                    b.Property<bool?>("UsedPad1")
                        .HasColumnType("bit");

                    b.Property<bool?>("UsedPad2")
                        .HasColumnType("bit");

                    b.Property<bool?>("UsedPad3")
                        .HasColumnType("bit");

                    b.Property<bool?>("UsedPad4")
                        .HasColumnType("bit");

                    b.Property<bool?>("UsedPad5")
                        .HasColumnType("bit");

                    b.Property<bool?>("UsedPad6")
                        .HasColumnType("bit");

                    b.Property<bool?>("UsedWrongHand1")
                        .HasColumnType("bit");

                    b.Property<bool?>("UsedWrongHand2")
                        .HasColumnType("bit");

                    b.Property<bool?>("UsedWrongHand3")
                        .HasColumnType("bit");

                    b.Property<bool?>("UsedWrongHand4")
                        .HasColumnType("bit");

                    b.Property<bool?>("UsedWrongHand5")
                        .HasColumnType("bit");

                    b.Property<bool?>("UsedWrongHand6")
                        .HasColumnType("bit");

                    b.HasKey("DreCaseFingerToNoseId");

                    b.HasIndex("DRECaseId")
                        .IsUnique()
                        .HasFilter("[DRECaseId] IS NOT NULL");

                    b.HasIndex(new[] { "DreCaseId" }, "IX_DRE_CASES_FTN_DreCaseId")
                        .IsUnique();

                    b.ToTable("DRE_CASES_FTN", "DRE");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.DreCaseHGN", b =>
                {
                    b.Property<int>("DreCaseHgnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DreCaseHgnId"));

                    b.Property<string>("CluesLeft")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("CluesRight")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("CluesTotal")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("ContactDescription")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool?>("Contacts")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConvergencePresent")
                        .HasColumnType("bit");

                    b.Property<int?>("DRECaseId")
                        .HasColumnType("int");

                    b.Property<bool?>("DistinctMaxDevL")
                        .HasColumnType("bit");

                    b.Property<bool?>("DistinctMaxDevR")
                        .HasColumnType("bit");

                    b.Property<int>("DreCaseId")
                        .HasColumnType("int");

                    b.Property<bool?>("EqualPupilSize")
                        .HasColumnType("bit");

                    b.Property<bool?>("EqualTracking")
                        .HasColumnType("bit");

                    b.Property<bool?>("FollowStimulus")
                        .HasColumnType("bit");

                    b.Property<bool?>("HeadInjuries")
                        .HasColumnType("bit");

                    b.Property<string>("HeadInjuriesComments")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int?>("HgnEstimatedAngleId")
                        .HasColumnType("int");

                    b.Property<bool?>("HgnUnderstood")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsVerticalNyst")
                        .HasColumnType("bit");

                    b.Property<int?>("LEstimatedAngleId")
                        .HasColumnType("int");

                    b.Property<bool?>("LackOfPursuitL")
                        .HasColumnType("bit");

                    b.Property<bool?>("LackOfPursuitR")
                        .HasColumnType("bit");

                    b.Property<bool?>("OnsetPrior45L")
                        .HasColumnType("bit");

                    b.Property<bool?>("OnsetPrior45R")
                        .HasColumnType("bit");

                    b.Property<string>("OtherComments")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("PupilSizeComments")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int?>("REstimatedAngleId")
                        .HasColumnType("int");

                    b.Property<bool?>("RestingNystagmus")
                        .HasColumnType("bit");

                    b.Property<string>("StimulusComments")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool?>("VerticalNyst")
                        .HasColumnType("bit");

                    b.HasKey("DreCaseHgnId");

                    b.HasIndex("DRECaseId");

                    b.HasIndex(new[] { "DreCaseId" }, "IX_DRE_CASE_HGN_DreCaseId");

                    b.ToTable("DRE_CASE_HGN", "DRE");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.DreCaseImage", b =>
                {
                    b.Property<int>("DreCaseImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DreCaseImageId"));

                    b.Property<int?>("DRECaseId")
                        .HasColumnType("int");

                    b.Property<int>("DreCaseId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DreCaseImageId");

                    b.HasIndex("DRECaseId");

                    b.HasIndex(new[] { "DreCaseId" }, "IX_DRE_CASE_IMAGES_DreCaseId");

                    b.ToTable("DRE_CASE_IMAGES", "DRE");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.DreCaseIndicator", b =>
                {
                    b.Property<int>("DreCaseIndicatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DreCaseIndicatorId"));

                    b.Property<string>("BpInd")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("BtInd")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Cann")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CnsDep")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CnsSti")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("DRECaseId")
                        .HasColumnType("int");

                    b.Property<string>("DissAne")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("DreCaseId")
                        .HasColumnType("int");

                    b.Property<string>("HallBody")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("HgnInd")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Inha")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LocInd")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("MstInd")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("NarAna")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool?>("OpAlcohol")
                        .HasColumnType("bit");

                    b.Property<bool?>("OpCannabis")
                        .HasColumnType("bit");

                    b.Property<bool?>("OpCnsDepressant")
                        .HasColumnType("bit");

                    b.Property<bool?>("OpCnsStimulant")
                        .HasColumnType("bit");

                    b.Property<bool?>("OpDissAnesthetic")
                        .HasColumnType("bit");

                    b.Property<bool?>("OpHallucinogen")
                        .HasColumnType("bit");

                    b.Property<bool?>("OpInhalant")
                        .HasColumnType("bit");

                    b.Property<bool?>("OpMedical")
                        .HasColumnType("bit");

                    b.Property<bool?>("OpNarcoticAnalgesic")
                        .HasColumnType("bit");

                    b.Property<bool?>("OpNotImpaired")
                        .HasColumnType("bit");

                    b.Property<string>("PrInd")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PsInd")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("RtlInd")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("VgnInd")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("DreCaseIndicatorId");

                    b.HasIndex("DRECaseId")
                        .IsUnique()
                        .HasFilter("[DRECaseId] IS NOT NULL");

                    b.HasIndex(new[] { "DreCaseId" }, "IX_DRE_CASE_INDICATORS_DreCaseId")
                        .IsUnique();

                    b.ToTable("DRE_CASE_INDICATORS", "DRE");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.DreCaseIntoxSalivaScreen", b =>
                {
                    b.Property<int>("DreSalivaToxResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DreSalivaToxResultId"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("DreCaseIntoxilyzerReportId")
                        .HasColumnType("int");

                    b.Property<int>("ToxScreenResultId")
                        .HasColumnType("int");

                    b.HasKey("DreSalivaToxResultId");

                    b.HasIndex(new[] { "DreCaseIntoxilyzerReportId" }, "IX_DRE_CASE_INTOX_SALIVA_SCREEN_DreCaseIntoxilyzerReportId");

                    b.ToTable("DRE_CASE_INTOX_SALIVA_SCREEN", "DRE");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.DreCaseIntoxUrineScreen", b =>
                {
                    b.Property<int>("DreUrineToxResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DreUrineToxResultId"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("DreCaseIntoxilyzerReportId")
                        .HasColumnType("int");

                    b.Property<int>("ToxScreenResultId")
                        .HasColumnType("int");

                    b.HasKey("DreUrineToxResultId");

                    b.HasIndex(new[] { "DreCaseIntoxilyzerReportId" }, "IX_DRE_CASE_INTOX_URINE_SCREEN_DreCaseIntoxilyzerReportId");

                    b.ToTable("DRE_CASE_INTOX_URINE_SCREEN", "DRE");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.DreCaseIntoxilyzerReport", b =>
                {
                    b.Property<int>("DreCaseIntoxilyzerReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DreCaseIntoxilyzerReportId"));

                    b.Property<bool?>("AttemptedBlood")
                        .HasColumnType("bit");

                    b.Property<bool?>("AttemptedBreath")
                        .HasColumnType("bit");

                    b.Property<bool?>("AttemptedSaliva")
                        .HasColumnType("bit");

                    b.Property<bool?>("AttemptedUrine")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("BloodDatetimeSpecimenExtractedBwd")
                        .HasColumnType("datetime2");

                    b.Property<string>("BloodDescriptionBwd")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("BloodEmployedIdPwd")
                        .HasColumnType("int");

                    b.Property<string>("BloodEmployerPwd")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("BloodLocationBwd")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("BloodMoreLessIntoxId")
                        .HasColumnType("int");

                    b.Property<string>("BloodNamePwd")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool?>("BloodNoAlcohol")
                        .HasColumnType("bit");

                    b.Property<string>("BloodPhonePwd")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool?>("BloodPreservative")
                        .HasColumnType("bit");

                    b.Property<bool?>("BloodRotated")
                        .HasColumnType("bit");

                    b.Property<bool?>("BloodTaken")
                        .HasColumnType("bit");

                    b.Property<string>("BloodVials")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("BreathBeginWait")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("BreathDateGiven")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("BreathIntoxOperatorL5")
                        .HasColumnType("bit");

                    b.Property<int?>("BreathMoreLessIntoxIdL5")
                        .HasColumnType("int");

                    b.Property<string>("BreathOperatorAgency")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("BreathOperatorName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("BreathRecordNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("BreathResult1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("BreathResult1Time")
                        .HasColumnType("datetime2");

                    b.Property<string>("BreathResult2")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("BreathResult2Time")
                        .HasColumnType("datetime2");

                    b.Property<string>("BreathSerialNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("BreathSubjectComments")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int?>("BreathVerifytempId")
                        .HasColumnType("int");

                    b.Property<int?>("DRECaseId")
                        .HasColumnType("int");

                    b.Property<int>("DreCaseId")
                        .HasColumnType("int");

                    b.Property<bool?>("ProvidedBlood")
                        .HasColumnType("bit");

                    b.Property<bool?>("ProvidedBreath")
                        .HasColumnType("bit");

                    b.Property<bool?>("ProvidedSaliva")
                        .HasColumnType("bit");

                    b.Property<bool?>("ProvidedUrine")
                        .HasColumnType("bit");

                    b.Property<bool?>("RefusedBlood")
                        .HasColumnType("bit");

                    b.Property<bool?>("RefusedBreath")
                        .HasColumnType("bit");

                    b.Property<bool?>("RefusedSaliva")
                        .HasColumnType("bit");

                    b.Property<bool?>("RefusedUrine")
                        .HasColumnType("bit");

                    b.Property<bool?>("SalivaDreObserved")
                        .HasColumnType("bit");

                    b.Property<bool?>("SalivaToxScreenPerformed")
                        .HasColumnType("bit");

                    b.Property<string>("SalivaWhoObserved")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool?>("UrineDreObserved")
                        .HasColumnType("bit");

                    b.Property<bool?>("UrineToxScreenPerformed")
                        .HasColumnType("bit");

                    b.Property<string>("UrineWhoObserved")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("DreCaseIntoxilyzerReportId");

                    b.HasIndex("DRECaseId")
                        .IsUnique()
                        .HasFilter("[DRECaseId] IS NOT NULL");

                    b.HasIndex(new[] { "DreCaseId" }, "IX_DRE_CASE_INTOXILYZER_REPORT_DreCaseId")
                        .IsUnique();

                    b.ToTable("DRE_CASE_INTOXILYZER_REPORT", "DRE");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.DreCaseNote", b =>
                {
                    b.Property<int>("DreCaseNoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DreCaseNoteId"));

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DreCaseId")
                        .HasColumnType("int");

                    b.Property<int>("DreCaseNoteTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DreCaseNoteId");

                    b.HasIndex(new[] { "DreCaseId" }, "IX_DRE_CASE_NOTES_DreCaseId");

                    b.HasIndex(new[] { "DreCaseNoteTypeId" }, "IX_DRE_CASE_NOTES_DreCaseNoteTypeId");

                    b.ToTable("DRE_CASE_NOTES", "DRE");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.DreCaseNoteType", b =>
                {
                    b.Property<int>("DreCaseNoteTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DreCaseNoteTypeId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("DreCasePageId")
                        .HasColumnType("int");

                    b.Property<int?>("FacesheetOrder")
                        .HasColumnType("int");

                    b.Property<int?>("NoteOrder")
                        .HasColumnType("int");

                    b.Property<string>("Section")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("DreCaseNoteTypeId");

                    b.HasIndex(new[] { "DreCasePageId" }, "IX_DRE_CASE_NOTE_TYPES_DreCasePageId");

                    b.ToTable("DRE_CASE_NOTE_TYPES", "DRE");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.DreCaseObservations", b =>
                {
                    b.Property<int>("DreCaseObservationsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DreCaseObservationsId"));

                    b.Property<bool?>("AttitudeAnxious")
                        .HasColumnType("bit");

                    b.Property<bool?>("AttitudeApologetic")
                        .HasColumnType("bit");

                    b.Property<bool?>("AttitudeCareFree")
                        .HasColumnType("bit");

                    b.Property<bool?>("AttitudeCocky")
                        .HasColumnType("bit");

                    b.Property<bool?>("AttitudeCombative")
                        .HasColumnType("bit");

                    b.Property<bool?>("AttitudeConfused")
                        .HasColumnType("bit");

                    b.Property<bool?>("AttitudeCooperative")
                        .HasColumnType("bit");

                    b.Property<bool?>("AttitudeDazed")
                        .HasColumnType("bit");

                    b.Property<bool?>("AttitudeDisoriented")
                        .HasColumnType("bit");

                    b.Property<bool?>("AttitudeExcited")
                        .HasColumnType("bit");

                    b.Property<bool?>("AttitudeIndifferent")
                        .HasColumnType("bit");

                    b.Property<bool?>("AttitudeNonCommunicative")
                        .HasColumnType("bit");

                    b.Property<string>("AttitudeOther")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("AttitudeParanoid")
                        .HasColumnType("bit");

                    b.Property<bool?>("AttitudePassive")
                        .HasColumnType("bit");

                    b.Property<bool?>("AttitudeRelaxed")
                        .HasColumnType("bit");

                    b.Property<bool?>("AttitudeRestless")
                        .HasColumnType("bit");

                    b.Property<bool?>("AttitudeTalkative")
                        .HasColumnType("bit");

                    b.Property<bool?>("AttitudeUninhibited")
                        .HasColumnType("bit");

                    b.Property<bool?>("BalanceDepressedReflexes")
                        .HasColumnType("bit");

                    b.Property<bool?>("BalanceFallingDown")
                        .HasColumnType("bit");

                    b.Property<bool?>("BalanceMoonWalking")
                        .HasColumnType("bit");

                    b.Property<bool?>("BalanceNeededSupport")
                        .HasColumnType("bit");

                    b.Property<bool?>("BalanceNormal")
                        .HasColumnType("bit");

                    b.Property<bool?>("BalancePoor")
                        .HasColumnType("bit");

                    b.Property<bool?>("BalanceSlow")
                        .HasColumnType("bit");

                    b.Property<bool?>("BalanceSluggish")
                        .HasColumnType("bit");

                    b.Property<bool?>("BalanceSwaying")
                        .HasColumnType("bit");

                    b.Property<bool?>("BalanceUncoordinated")
                        .HasColumnType("bit");

                    b.Property<bool?>("BalanceUnsteady")
                        .HasColumnType("bit");

                    b.Property<string>("BlindnessComment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool?>("BlindnessLeft")
                        .HasColumnType("bit");

                    b.Property<bool?>("BlindnessNone")
                        .HasColumnType("bit");

                    b.Property<bool?>("BlindnessRight")
                        .HasColumnType("bit");

                    b.Property<bool?>("BreathAlcohol")
                        .HasColumnType("bit");

                    b.Property<bool?>("BreathBad")
                        .HasColumnType("bit");

                    b.Property<bool?>("BreathChemical")
                        .HasColumnType("bit");

                    b.Property<bool?>("BreathMarijuana")
                        .HasColumnType("bit");

                    b.Property<bool?>("BreathNormal")
                        .HasColumnType("bit");

                    b.Property<string>("BreathOther")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Contacts")
                        .HasColumnType("bit");

                    b.Property<bool?>("ContactsHard")
                        .HasColumnType("bit");

                    b.Property<bool?>("ContactsSoft")
                        .HasColumnType("bit");

                    b.Property<string>("CoordinationOther")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("DRECaseId")
                        .HasColumnType("int");

                    b.Property<int>("DreCaseId")
                        .HasColumnType("int");

                    b.Property<bool?>("EyelidsDroopy")
                        .HasColumnType("bit");

                    b.Property<bool?>("EyelidsNormal")
                        .HasColumnType("bit");

                    b.Property<bool?>("EyesBloodShot")
                        .HasColumnType("bit");

                    b.Property<bool?>("EyesNormal")
                        .HasColumnType("bit");

                    b.Property<bool?>("EyesRed")
                        .HasColumnType("bit");

                    b.Property<bool?>("EyesWatery")
                        .HasColumnType("bit");

                    b.Property<bool?>("FaceBlankStare")
                        .HasColumnType("bit");

                    b.Property<bool?>("FaceBruxism")
                        .HasColumnType("bit");

                    b.Property<bool?>("FaceDazedAppearance")
                        .HasColumnType("bit");

                    b.Property<bool?>("FaceDryMouth")
                        .HasColumnType("bit");

                    b.Property<bool?>("FaceFacialItching")
                        .HasColumnType("bit");

                    b.Property<bool?>("FaceFlushed")
                        .HasColumnType("bit");

                    b.Property<bool?>("FaceInjuries")
                        .HasColumnType("bit");

                    b.Property<bool?>("FaceNormal")
                        .HasColumnType("bit");

                    b.Property<bool?>("FaceOnTheNod")
                        .HasColumnType("bit");

                    b.Property<bool?>("FaceOpenSores")
                        .HasColumnType("bit");

                    b.Property<string>("FaceOther")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("FacePale")
                        .HasColumnType("bit");

                    b.Property<bool?>("FaceResidueOfSubstance")
                        .HasColumnType("bit");

                    b.Property<bool?>("FaceScars")
                        .HasColumnType("bit");

                    b.Property<bool?>("FaceSryMouth")
                        .HasColumnType("bit");

                    b.Property<bool?>("FaceSweatyPerspiring")
                        .HasColumnType("bit");

                    b.Property<bool?>("Glasses")
                        .HasColumnType("bit");

                    b.Property<bool?>("LensesNone")
                        .HasColumnType("bit");

                    b.Property<bool?>("SpeechIncoherent")
                        .HasColumnType("bit");

                    b.Property<bool?>("SpeechIncompleteVerbalResposes")
                        .HasColumnType("bit");

                    b.Property<bool?>("SpeechLow")
                        .HasColumnType("bit");

                    b.Property<bool?>("SpeechNormal")
                        .HasColumnType("bit");

                    b.Property<string>("SpeechOther")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("SpeechRapidFast")
                        .HasColumnType("bit");

                    b.Property<bool?>("SpeechRaspy")
                        .HasColumnType("bit");

                    b.Property<bool?>("SpeechSlow")
                        .HasColumnType("bit");

                    b.Property<bool?>("SpeechSlowMumbled")
                        .HasColumnType("bit");

                    b.Property<bool?>("SpeechSlurred")
                        .HasColumnType("bit");

                    b.Property<bool?>("SpeechThickTongued")
                        .HasColumnType("bit");

                    b.Property<bool?>("TrackingEqual")
                        .HasColumnType("bit");

                    b.Property<bool?>("TrackingUnequal")
                        .HasColumnType("bit");

                    b.Property<string>("TrackingUnequalDesc")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("WalkingFalling")
                        .HasColumnType("bit");

                    b.Property<bool?>("WalkingHeavyFooted")
                        .HasColumnType("bit");

                    b.Property<bool?>("WalkingNormal")
                        .HasColumnType("bit");

                    b.Property<bool?>("WalkingStaggering")
                        .HasColumnType("bit");

                    b.Property<bool?>("WalkingSwaying")
                        .HasColumnType("bit");

                    b.HasKey("DreCaseObservationsId");

                    b.HasIndex("DRECaseId")
                        .IsUnique()
                        .HasFilter("[DRECaseId] IS NOT NULL");

                    b.HasIndex(new[] { "DreCaseId" }, "IX_DRE_CASES_OBS_DreCaseId")
                        .IsUnique();

                    b.ToTable("DRE_CASES_OBS", "DRE");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.DreCaseOffense", b =>
                {
                    b.Property<int>("DreCaseOffenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DreCaseOffenseId"));

                    b.Property<bool?>("Assault")
                        .HasColumnType("bit");

                    b.Property<string>("AssaultCharged")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("Charged")
                        .HasColumnType("bit");

                    b.Property<int?>("CrashId")
                        .HasColumnType("int");

                    b.Property<int?>("DRECaseId")
                        .HasColumnType("int");

                    b.Property<bool?>("DWI")
                        .HasColumnType("bit");

                    b.Property<int>("DreCaseId")
                        .HasColumnType("int");

                    b.Property<int?>("InjuryId")
                        .HasColumnType("int");

                    b.Property<string>("NoChargeComment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("OffenseId")
                        .HasColumnType("int");

                    b.Property<bool?>("Other")
                        .HasColumnType("bit");

                    b.Property<string>("OtherCharged")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("Possession")
                        .HasColumnType("bit");

                    b.Property<string>("PossessionCharged")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("PublicIntox")
                        .HasColumnType("bit");

                    b.Property<bool?>("RecklessDriving")
                        .HasColumnType("bit");

                    b.Property<bool?>("Theft")
                        .HasColumnType("bit");

                    b.Property<string>("TheftCharged")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("DreCaseOffenseId");

                    b.HasIndex("DRECaseId")
                        .IsUnique()
                        .HasFilter("[DRECaseId] IS NOT NULL");

                    b.HasIndex(new[] { "DreCaseId" }, "IX_DRE_CASES_OFFENSES_DreCaseId")
                        .IsUnique();

                    b.ToTable("DRE_CASES_OFFENSES", "DRE");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.DreCaseOneLegStand", b =>
                {
                    b.Property<int>("DreCaseOLSId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DreCaseOLSId"));

                    b.Property<bool?>("BodyTremosL")
                        .HasColumnType("bit");

                    b.Property<bool?>("BodyTremos_R")
                        .HasColumnType("bit");

                    b.Property<int?>("DRECaseId")
                        .HasColumnType("int");

                    b.Property<int>("DreCaseId")
                        .HasColumnType("int");

                    b.Property<bool?>("EyeLidTremosL")
                        .HasColumnType("bit");

                    b.Property<bool?>("EyeLidTremosR")
                        .HasColumnType("bit");

                    b.Property<int?>("FootWearTypeId")
                        .HasColumnType("int");

                    b.Property<bool?>("LegTremosL")
                        .HasColumnType("bit");

                    b.Property<bool?>("LegTremosR")
                        .HasColumnType("bit");

                    b.Property<bool?>("MuscleTensions")
                        .HasColumnType("bit");

                    b.Property<bool?>("NOLookDownL")
                        .HasColumnType("bit");

                    b.Property<bool?>("NOLookDownR")
                        .HasColumnType("bit");

                    b.Property<bool?>("NoCountL")
                        .HasColumnType("bit");

                    b.Property<bool?>("NoCountR")
                        .HasColumnType("bit");

                    b.Property<bool?>("NotSixInchesL")
                        .HasColumnType("bit");

                    b.Property<bool?>("NotSixInchesR")
                        .HasColumnType("bit");

                    b.Property<string>("OLSArmTimeL")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OLSArmTimeR")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OLSArmsL")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("OLSArmsR")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("OLSComments")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<bool?>("OLSFootL")
                        .HasColumnType("bit");

                    b.Property<bool?>("OLSFootR")
                        .HasColumnType("bit");

                    b.Property<string>("OLSHopTimeL")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OLSHopTimeR")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OLSHoppingL")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("OLSHoppingR")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("OLSLeftDown")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("OLSLeftDownCount")
                        .HasColumnType("int");

                    b.Property<string>("OLSNoates")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OLSOtherL")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("OLSOtherR")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("OLSRightDown")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("OLSRightDownCount")
                        .HasColumnType("int");

                    b.Property<string>("OLSSwayTimeL")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OLSSwayTimeR")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OLSSwaysL")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("OLSSwaysR")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("OLSTImeLeftDown")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("OLSTImeRightDown")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("OLSTimeL")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("OLSTimeR")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool?>("OneLegStandGiven")
                        .HasColumnType("bit");

                    b.Property<bool?>("OtherL")
                        .HasColumnType("bit");

                    b.Property<bool?>("OtherR")
                        .HasColumnType("bit");

                    b.Property<bool?>("Sounds")
                        .HasColumnType("bit");

                    b.Property<bool?>("UnableToPerform")
                        .HasColumnType("bit");

                    b.Property<bool?>("UnderstoodInstruction")
                        .HasColumnType("bit");

                    b.HasKey("DreCaseOLSId");

                    b.HasIndex("DRECaseId")
                        .IsUnique()
                        .HasFilter("[DRECaseId] IS NOT NULL");

                    b.HasIndex(new[] { "DreCaseId" }, "IX_DRE_CASE_OLS_DreCaseId")
                        .IsUnique();

                    b.ToTable("DRE_CASE_OLS", "DRE");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.DreCaseOtherObservation", b =>
                {
                    b.Property<int>("OtherObservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OtherObservationId"));

                    b.Property<int?>("DRECaseId")
                        .HasColumnType("int");

                    b.Property<int>("DreCaseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EvalCompletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("InjComments")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("InjLaText")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("InjRaText")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("InjectionSitesId")
                        .HasColumnType("int");

                    b.Property<string>("MtComments")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("MtFlaccid")
                        .HasColumnType("bit");

                    b.Property<bool?>("MtNormal")
                        .HasColumnType("bit");

                    b.Property<bool?>("MtRigid")
                        .HasColumnType("bit");

                    b.Property<string>("PulseRate3")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PulseSite3")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("PulseTime3")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubDrugs")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubDrugsQty")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SubDrugsTime")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SubDrugsWhere")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SubOtherComments")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("SubRefusedEval")
                        .HasColumnType("bit");

                    b.Property<bool>("SubStopPartEval")
                        .HasColumnType("bit");

                    b.HasKey("OtherObservationId");

                    b.HasIndex("DRECaseId")
                        .IsUnique()
                        .HasFilter("[DRECaseId] IS NOT NULL");

                    b.HasIndex(new[] { "DreCaseId" }, "IX_DRE_Case_OtherObservation_DreCaseId")
                        .IsUnique();

                    b.ToTable("DRE_Case_OtherObservation", "DRE");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.DreCaseOtherOfficer", b =>
                {
                    b.Property<int>("OtherOfficerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OtherOfficerId"));

                    b.Property<bool?>("Accepted")
                        .HasColumnType("bit");

                    b.Property<string>("Badge")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("DRECaseId")
                        .HasColumnType("int");

                    b.Property<int>("DreCaseId")
                        .HasColumnType("int");

                    b.Property<string>("DreNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("DreRoleId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<bool?>("IsOwner")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<string>("OfficerAgency")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("OfficerDeptId")
                        .HasColumnType("int");

                    b.Property<int?>("OfficerId")
                        .HasColumnType("int");

                    b.Property<string>("OfficerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("OfficerUserId")
                        .HasColumnType("int");

                    b.Property<bool?>("PBT")
                        .HasColumnType("bit");

                    b.Property<string>("RollingLogNumber")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.HasKey("OtherOfficerId");

                    b.HasIndex("DRECaseId");

                    b.HasIndex(new[] { "DreCaseId" }, "IX_DRE_CASES_OTHER_OFFICER_DreCaseId");

                    b.HasIndex(new[] { "DreRoleId" }, "IX_DRE_CASES_OTHER_OFFICER_DreRoleId");

                    b.ToTable("DRE_CASES_OTHER_OFFICER", "DRE");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.DreCasePage", b =>
                {
                    b.Property<int>("DreCasePageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DreCasePageId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("PageName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PageOrder")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DreCasePageId");

                    b.ToTable("DRE_CASE_PAGES", "DRE");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.DreCasePicture", b =>
                {
                    b.Property<int>("DreCasePictureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DreCasePictureId"));

                    b.Property<int?>("DRECaseId")
                        .HasColumnType("int");

                    b.Property<int>("DreCaseId")
                        .HasColumnType("int");

                    b.Property<byte[]>("ImageData")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Section")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Sequence")
                        .HasColumnType("int");

                    b.HasKey("DreCasePictureId");

                    b.HasIndex("DRECaseId");

                    b.HasIndex(new[] { "DreCaseId" }, "IX_DRE_CASE_PIC_DreCaseId");

                    b.ToTable("DRE_CASE_PIC", "DRE");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.DreCaseRombergBalance", b =>
                {
                    b.Property<int>("DreCaseRBId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DreCaseRBId"));

                    b.Property<bool?>("AlmostFell")
                        .HasColumnType("bit");

                    b.Property<bool?>("BodyTremors")
                        .HasColumnType("bit");

                    b.Property<bool?>("CIRCSway")
                        .HasColumnType("bit");

                    b.Property<string>("CIRCSwayDesc")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("DRECaseId")
                        .HasColumnType("int");

                    b.Property<int>("DreCaseId")
                        .HasColumnType("int");

                    b.Property<bool?>("EyelidTremos")
                        .HasColumnType("bit");

                    b.Property<bool?>("FrontToBackSway")
                        .HasColumnType("bit");

                    b.Property<string>("FrontToBackSwayDesc")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("InternalClock")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("LegTremos")
                        .HasColumnType("bit");

                    b.Property<bool?>("MuscleToneFlaccid")
                        .HasColumnType("bit");

                    b.Property<bool?>("MuscleToneRigid")
                        .HasColumnType("bit");

                    b.Property<bool?>("NoSway")
                        .HasColumnType("bit");

                    b.Property<bool?>("OpenedEyes")
                        .HasColumnType("bit");

                    b.Property<string>("OtherText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("RombergBalanceGiven")
                        .HasColumnType("bit");

                    b.Property<bool?>("RombergOther")
                        .HasColumnType("bit");

                    b.Property<bool?>("SideToSideSway")
                        .HasColumnType("bit");

                    b.Property<string>("SideToSideSwayDesc")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Statement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("UnableToPerform")
                        .HasColumnType("bit");

                    b.Property<bool?>("UnableToStandStill")
                        .HasColumnType("bit");

                    b.Property<bool?>("UnserstoodInstructions")
                        .HasColumnType("bit");

                    b.Property<bool?>("UsedArms")
                        .HasColumnType("bit");

                    b.HasKey("DreCaseRBId");

                    b.HasIndex("DRECaseId")
                        .IsUnique()
                        .HasFilter("[DRECaseId] IS NOT NULL");

                    b.HasIndex(new[] { "DreCaseId" }, "IX_DRE_CASE_RB_DreCaseId")
                        .IsUnique();

                    b.ToTable("DRE_CASE_RB", "DRE");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.DreCaseToxSpec", b =>
                {
                    b.Property<int>("DreCaseToxSpecId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DreCaseToxSpecId"));

                    b.Property<bool?>("Active")
                        .HasMaxLength(255)
                        .HasColumnType("bit");

                    b.Property<string>("BacResult")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DRECaseId")
                        .HasColumnType("int");

                    b.Property<int>("DreCaseId")
                        .HasColumnType("int");

                    b.Property<int>("DreCaseToxSpecTypeToxSpecTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DtCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DtUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("HospSerResult")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool?>("NoAlcohol")
                        .HasColumnType("bit");

                    b.Property<int?>("ToxSpecTypeId")
                        .HasColumnType("int");

                    b.Property<string>("WholeBloodResult")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("DreCaseToxSpecId");

                    b.HasIndex("DRECaseId");

                    b.HasIndex("DreCaseToxSpecTypeToxSpecTypeId");

                    b.HasIndex(new[] { "DreCaseId" }, "IX_DreCaseToxSpec_DreCaseId");

                    b.HasIndex(new[] { "ToxSpecTypeId" }, "IX_DreCaseToxSpec_ToxSpecTypeId");

                    b.ToTable("DreCaseToxSpec", "DRE");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.DreCaseToxicologyDrug", b =>
                {
                    b.Property<int>("DreCaseToxDrugId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DreCaseToxDrugId"));

                    b.Property<int?>("DRECaseId")
                        .HasColumnType("int");

                    b.Property<int?>("DpsDrugListId")
                        .HasColumnType("int");

                    b.Property<int>("DreCaseId")
                        .HasColumnType("int");

                    b.Property<int?>("DreCaseToxSpecId")
                        .HasColumnType("int");

                    b.Property<int?>("DrugMeasurement")
                        .HasColumnType("int");

                    b.Property<string>("DrugResult")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DreCaseToxDrugId");

                    b.HasIndex("DRECaseId");

                    b.HasIndex(new[] { "DreCaseId" }, "IX_DRE_CASE_TOXICOLOGY_DRUG_DreCaseId");

                    b.HasIndex(new[] { "DreCaseToxSpecId" }, "IX_DRE_CASE_TOXICOLOGY_DRUG_DreCaseToxSpecId");

                    b.ToTable("DRE_CASE_TOXICOLOGY_DRUG", "DRE");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.DreCaseVideo", b =>
                {
                    b.Property<int>("DreCaseVideoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DreCaseVideoId"));

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArchiveId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DRECaseId")
                        .HasColumnType("int");

                    b.Property<int>("DreCaseId")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("VideoS3Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DreCaseVideoId");

                    b.HasIndex("DRECaseId");

                    b.HasIndex(new[] { "DreCaseId" }, "IX_DRE_Case_Video_DreCaseId");

                    b.ToTable("DRE_Case_Video", "DRE");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.DreCaseVitalSign", b =>
                {
                    b.Property<int>("DreCaseVitalSignId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DreCaseVitalSignId"));

                    b.Property<string>("BPDiastolic")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("BPSystolic")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("DRECaseId")
                        .HasColumnType("int");

                    b.Property<int>("DreCaseId")
                        .HasColumnType("int");

                    b.Property<string>("PulseRate")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PulseSite")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("PulseTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Temperature")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("DreCaseVitalSignId");

                    b.HasIndex("DRECaseId")
                        .IsUnique()
                        .HasFilter("[DRECaseId] IS NOT NULL");

                    b.HasIndex(new[] { "DreCaseId" }, "IX_DRE_CASES_VITAL_SIGNS_DreCaseId")
                        .IsUnique();

                    b.ToTable("DRE_CASES_VITAL_SIGNS", "DRE");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.DreCaseWalkTurn", b =>
                {
                    b.Property<int>("DreCaseWTId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DreCaseWTId"));

                    b.Property<int?>("ActualSteps1")
                        .HasColumnType("int");

                    b.Property<int?>("ActualSteps2")
                        .HasColumnType("int");

                    b.Property<bool?>("BodyTremos")
                        .HasColumnType("bit");

                    b.Property<bool?>("CannotBalance")
                        .HasColumnType("bit");

                    b.Property<int?>("DRECaseId")
                        .HasColumnType("int");

                    b.Property<int>("DreCaseId")
                        .HasColumnType("int");

                    b.Property<bool?>("EyelidsTremos")
                        .HasColumnType("bit");

                    b.Property<bool?>("ImproperTurn")
                        .HasColumnType("bit");

                    b.Property<bool?>("LegTremos")
                        .HasColumnType("bit");

                    b.Property<bool?>("MissHellToe")
                        .HasColumnType("bit");

                    b.Property<bool?>("MuscleTensions")
                        .HasColumnType("bit");

                    b.Property<string>("OLSComments")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<int?>("OLSStarts")
                        .HasColumnType("int");

                    b.Property<string>("OtherComments")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool?>("RaisesArms")
                        .HasColumnType("bit");

                    b.Property<int?>("SO_LL")
                        .HasColumnType("int");

                    b.Property<int?>("SO_LR")
                        .HasColumnType("int");

                    b.Property<int?>("SO_RL")
                        .HasColumnType("int");

                    b.Property<int?>("SO_RR")
                        .HasColumnType("int");

                    b.Property<bool?>("Sounds")
                        .HasColumnType("bit");

                    b.Property<bool?>("StartsSoon")
                        .HasColumnType("bit");

                    b.Property<bool?>("StepOffLine")
                        .HasColumnType("bit");

                    b.Property<bool?>("StopsWalking")
                        .HasColumnType("bit");

                    b.Property<bool?>("Swaying")
                        .HasColumnType("bit");

                    b.Property<bool?>("UnableToPerform")
                        .HasColumnType("bit");

                    b.Property<bool?>("UnserstoodInstructions")
                        .HasColumnType("bit");

                    b.Property<string>("WTMissesFirstNine")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("WTMissesSecondNine")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("WTNAFirstNine")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("WTNASecondNine")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool?>("WTOther")
                        .HasColumnType("bit");

                    b.Property<string>("WTRaisesFirstNine")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("WTRaisesSecondNine")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("WTStepCount")
                        .HasColumnType("int");

                    b.Property<int?>("WTStepCountSecond")
                        .HasColumnType("int");

                    b.Property<string>("WTStepsLeftFirstNine")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("WTStepsLeftSecondNine")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("WTStepsRightFirstNine")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("WTStepsRightSecondNine")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("WTStopsFirstNine")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("WTStopsSecondNine")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("WTTakenSecondNine")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("WTTakensFirstNine")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("WalkTurnDescribeTurn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("WalkTurnGiven")
                        .HasColumnType("bit");

                    b.Property<string>("WalkTurnNoTest")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("WrongNumberSteps")
                        .HasColumnType("bit");

                    b.HasKey("DreCaseWTId");

                    b.HasIndex("DRECaseId")
                        .IsUnique()
                        .HasFilter("[DRECaseId] IS NOT NULL");

                    b.HasIndex(new[] { "DreCaseId" }, "IX_DRE_CASE_WT_DreCaseId")
                        .IsUnique();

                    b.ToTable("DRE_CASE_WT", "DRE");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.LU.ArrestingOfficerType", b =>
                {
                    b.Property<int>("ArrestingOfficerTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArrestingOfficerTypeId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("OfficerType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ArrestingOfficerTypeId");

                    b.ToTable("TBL_OPT_AO_TYPES", "DRE");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.LU.DRECaseStatus", b =>
                {
                    b.Property<int>("DRECaseStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DRECaseStatusId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DRECaseStatusId");

                    b.ToTable("TBL_OPT_DRE_CASE_STATUS", "DRE");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.LU.DRERole", b =>
                {
                    b.Property<int>("DRERoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DRERoleId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsOfficerRole")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DRERoleId");

                    b.ToTable("TBL_OPT_DRE_ROLES", "DRE");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.LU.DREType", b =>
                {
                    b.Property<int>("DRETypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DRETypeId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DRETypeId");

                    b.ToTable("TBL_OPT_DRE_TYPES", "DRE");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.LU.DpsDrugList", b =>
                {
                    b.Property<int>("DpsDrugListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DpsDrugListId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("DpsDrug")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DpsDrugCategory")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DpsDrugListId");

                    b.ToTable("TBL_OPT_DPS_DRUG_LIST", "DRE");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.LU.DreCaseFirstIndicator", b =>
                {
                    b.Property<int>("DreCaseFirstIndicatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DreCaseFirstIndicatorId"));

                    b.Property<string>("CANN")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CnsDep")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CnsSti")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("DisAne")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("HALL")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("INHA")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("IndType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("IndTypeFullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NarAna")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("DreCaseFirstIndicatorId");

                    b.ToTable("TBL_OPT_DRE_FIRST_INDICATORS", "DRE");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.LU.DreCaseSecondIndicator", b =>
                {
                    b.Property<int>("DreCaseSecondIndicatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DreCaseSecondIndicatorId"));

                    b.Property<string>("Cann")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CnsDep")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CnsSti")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DissAne")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hall")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IndType")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("IndTypeFullName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Inha")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NarAna")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DreCaseSecondIndicatorId");

                    b.ToTable("TBL_OPT_DRE_SECOND_INDICATORS", "DRE");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.LU.DreCaseToxSpecType", b =>
                {
                    b.Property<int>("ToxSpecTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ToxSpecTypeId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ToxSpecTypeDesc")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ToxSpecTypeId");

                    b.ToTable("TBL_OPT_TOX_SPEC_TYPE", "DRE");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.LU.DreMajorIndicator", b =>
                {
                    b.Property<int>("DreMajorIndicatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DreMajorIndicatorId"));

                    b.Property<string>("ColumnName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("IndTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ValueToDisplay")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("DreMajorIndicatorId");

                    b.ToTable("TBL_OPT_DRE_MAJOR_INDICATORS ", "DRE");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.LU.DreNotified", b =>
                {
                    b.Property<int>("DreNotifiedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DreNotifiedId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("DreNotifiedId");

                    b.ToTable("TBL_OPT_DRE_NOTIFIED", "DRE");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.LU.DreRequested", b =>
                {
                    b.Property<int>("DreRequestedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DreRequestedId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("DreRequestedId");

                    b.ToTable("TBL_OPT_DRE_REQUESTED", "DRE");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.LU.ReactionToLight", b =>
                {
                    b.Property<int>("ReactionToLightId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReactionToLightId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ReactionToLightId");

                    b.ToTable("TBL_OPT_DRE_REACTION_TO_LIGHT", "DRE");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.Defendant", b =>
                {
                    b.Property<int>("DefendantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DefendantId"));

                    b.Property<string>("ActivityType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Alias")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BirthPlace")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<bool>("Citizen")
                        .HasColumnType("bit");

                    b.Property<string>("Condition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateEntered")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DlExpire")
                        .HasColumnType("datetime2");

                    b.Property<string>("DlNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DlStateId")
                        .HasColumnType("int");

                    b.Property<string>("DlType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime2")
                        .HasColumnName("DOB");

                    b.Property<string>("DpsSid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EducationId")
                        .HasColumnType("int");

                    b.Property<int?>("EthnicityId")
                        .HasColumnType("int");

                    b.Property<int?>("EyeColorId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("GenderId")
                        .HasColumnType("int");

                    b.Property<int?>("HairColorId")
                        .HasColumnType("int");

                    b.Property<int?>("HeightFt")
                        .HasColumnType("int");

                    b.Property<int?>("HeightIn")
                        .HasColumnType("int");

                    b.Property<bool>("Helmet")
                        .HasColumnType("bit");

                    b.Property<string>("IdNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("MotherMaiden")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Occupation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OfficerStepShiftId")
                        .HasColumnType("int");

                    b.Property<string>("PlaceEmployment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RaceId")
                        .HasColumnType("int");

                    b.Property<bool>("SafetyBelt")
                        .HasColumnType("bit");

                    b.Property<int?>("SkinComplexionSkinId")
                        .HasColumnType("int");

                    b.Property<int?>("SkinId")
                        .HasColumnType("int");

                    b.Property<string>("SpecialNeeds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ssn")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SSN");

                    b.Property<bool>("StepFunded")
                        .HasColumnType("bit");

                    b.Property<int?>("StepGrantTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("StepZoneId")
                        .HasColumnType("int");

                    b.Property<string>("Tattoos")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("Training")
                        .HasColumnType("bit");

                    b.Property<int?>("Weight")
                        .HasColumnType("int");

                    b.Property<int?>("ZoneId")
                        .HasColumnType("int");

                    b.HasKey("DefendantId");

                    b.HasIndex(new[] { "CaseId" }, "IX_Defendants_CaseId");

                    b.HasIndex(new[] { "DlStateId" }, "IX_Defendants_DlStateId");

                    b.HasIndex(new[] { "EducationId" }, "IX_Defendants_EducationId");

                    b.HasIndex(new[] { "EthnicityId" }, "IX_Defendants_EthnicityId");

                    b.HasIndex(new[] { "EyeColorId" }, "IX_Defendants_EyeColorId");

                    b.HasIndex(new[] { "GenderId" }, "IX_Defendants_GenderId");

                    b.HasIndex(new[] { "HairColorId" }, "IX_Defendants_HairColorId");

                    b.HasIndex(new[] { "RaceId" }, "IX_Defendants_RaceId");

                    b.HasIndex(new[] { "SkinComplexionSkinId" }, "IX_Defendants_SkinComplexionSkinId");

                    b.HasIndex(new[] { "StepGrantTypeId" }, "IX_Defendants_StepGrantTypeId");

                    b.HasIndex(new[] { "ZoneId" }, "IX_Defendants_ZoneId");

                    b.ToTable("Defendants", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DefendantAdditionalInfo", b =>
                {
                    b.Property<int>("DefendantAdditionalInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DefendantAdditionalInfoId"));

                    b.Property<bool>("AccidentReport")
                        .HasColumnType("bit");

                    b.Property<string>("AdditionalInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DefendantId")
                        .HasColumnType("int");

                    b.Property<bool>("DefendantInfo")
                        .HasColumnType("bit");

                    b.Property<bool>("Dic23")
                        .HasColumnType("bit")
                        .HasColumnName("DIC23");

                    b.Property<bool>("Dic24")
                        .HasColumnType("bit")
                        .HasColumnName("DIC24");

                    b.Property<bool>("Dic25")
                        .HasColumnType("bit")
                        .HasColumnName("DIC25");

                    b.Property<bool>("Fsts")
                        .HasColumnType("bit")
                        .HasColumnName("FSTs");

                    b.Property<bool>("ImpoundSheet")
                        .HasColumnType("bit");

                    b.Property<bool>("Intoxilyzer")
                        .HasColumnType("bit");

                    b.Property<bool>("Observations")
                        .HasColumnType("bit");

                    b.Property<bool>("OffenseInfo")
                        .HasColumnType("bit");

                    b.Property<bool>("OfficerSupplement")
                        .HasColumnType("bit");

                    b.Property<bool>("Other")
                        .HasColumnType("bit");

                    b.Property<string>("OtherDesc")
                        .HasMaxLength(1023)
                        .HasColumnType("nvarchar(1023)");

                    b.Property<bool>("PassengerInfo")
                        .HasColumnType("bit");

                    b.Property<bool>("SearchWarrant")
                        .HasColumnType("bit");

                    b.Property<bool>("SfstcheckList")
                        .HasColumnType("bit")
                        .HasColumnName("SFSTCheckList");

                    b.Property<bool>("SpecimenInfo")
                        .HasColumnType("bit");

                    b.Property<bool>("WitnessStatements")
                        .HasColumnType("bit");

                    b.HasKey("DefendantAdditionalInfoId");

                    b.HasIndex(new[] { "DefendantId" }, "IX_DefendantAdditionalInfos_DefendantId")
                        .IsUnique();

                    b.ToTable("DefendantAdditionalInfos", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DefendantAddress", b =>
                {
                    b.Property<int>("DefendantAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DefendantAddressId"));

                    b.Property<string>("Address1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Address2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("AddressGroupId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DefOccupation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefPlaceEmployment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefWorkPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DefendantId")
                        .HasColumnType("int");

                    b.Property<string>("EmAddress1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmAddress2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmStateId")
                        .HasColumnType("int");

                    b.Property<string>("EmZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Lat")
                        .HasColumnType("float");

                    b.Property<double>("Lng")
                        .HasColumnType("float");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OccAddress1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OccAddress2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OccCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OccStateId")
                        .HasColumnType("int");

                    b.Property<string>("OccZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Relationship")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("DefendantAddressId");

                    b.HasIndex(new[] { "AddressGroupId" }, "IX_DefendantAddresses_AddressGroupId");

                    b.HasIndex(new[] { "CountyId" }, "IX_DefendantAddresses_CountyId");

                    b.HasIndex(new[] { "DefendantId" }, "IX_DefendantAddresses_DefendantId");

                    b.HasIndex(new[] { "EmStateId" }, "IX_DefendantAddresses_EmStateId");

                    b.HasIndex(new[] { "OccStateId" }, "IX_DefendantAddresses_OccStateId");

                    b.HasIndex(new[] { "StateId" }, "IX_DefendantAddresses_StateId");

                    b.ToTable("DefendantAddresses", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DefendantEmContact", b =>
                {
                    b.Property<int>("EmergencyContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmergencyContactId"));

                    b.Property<string>("Address1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Address2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("AddressGroupId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountyId")
                        .HasColumnType("int");

                    b.Property<int>("DefendantId")
                        .HasColumnType("int");

                    b.Property<double>("Lat")
                        .HasColumnType("float");

                    b.Property<double>("Lng")
                        .HasColumnType("float");

                    b.Property<string>("Relationship")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("EmergencyContactId");

                    b.HasIndex(new[] { "AddressGroupId" }, "IX_DefendantEmContacts_AddressGroupId");

                    b.HasIndex(new[] { "CountyId" }, "IX_DefendantEmContacts_CountyId");

                    b.HasIndex(new[] { "DefendantId" }, "IX_DefendantEmContacts_DefendantId");

                    b.HasIndex(new[] { "StateId" }, "IX_DefendantEmContacts_StateId");

                    b.ToTable("DefendantEmContacts", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DefendantInterview", b =>
                {
                    b.Property<int>("DefendantInterviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DefendantInterviewId"));

                    b.Property<bool?>("AskOnVideo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfInterview")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateRead")
                        .HasColumnType("datetime2");

                    b.Property<int>("DefendantId")
                        .HasColumnType("int");

                    b.Property<string>("DefendantSpeech")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool?>("DoNotAskQuestion")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<bool?>("DoNotAskQuestionForLanguage")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<string>("Interviewer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InterviewerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("MirandaInEngilish")
                        .HasColumnType("bit");

                    b.Property<bool>("MirandaInSpanish")
                        .HasColumnType("bit");

                    b.Property<bool>("MirandaWarningRead")
                        .HasColumnType("bit");

                    b.Property<string>("ReadBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool?>("RefuseToAnswer")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<bool>("StatedUnderstood")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("TimeOfInterview")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TimeRead")
                        .HasColumnType("datetime2");

                    b.Property<string>("UnusualActions")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("DefendantInterviewId");

                    b.HasIndex(new[] { "DefendantId" }, "IX_DefendantInterviews_DefendantId")
                        .IsUnique();

                    b.ToTable("DefendantInterviews", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DefendantInterviewQuestion", b =>
                {
                    b.Property<int>("DefendantInterviewQuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DefendantInterviewQuestionId"));

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DefendantInterviewId")
                        .HasColumnType("int");

                    b.Property<int>("InterviewQuestionId")
                        .HasColumnType("int");

                    b.HasKey("DefendantInterviewQuestionId");

                    b.HasIndex(new[] { "DefendantInterviewId" }, "IX_DefendantInterviewQuestions_DefendantInterviewId");

                    b.HasIndex(new[] { "InterviewQuestionId" }, "IX_DefendantInterviewQuestions_InterviewQuestionId");

                    b.ToTable("DefendantInterviewQuestions", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DefendantObservation", b =>
                {
                    b.Property<int>("DefendantObservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DefendantObservationId"));

                    b.Property<int?>("AlcoholTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("AttitudeApologetic")
                        .HasColumnType("bit");

                    b.Property<bool>("AttitudeCocky")
                        .HasColumnType("bit");

                    b.Property<bool>("AttitudeCombative")
                        .HasColumnType("bit");

                    b.Property<bool>("AttitudeCooperative")
                        .HasColumnType("bit");

                    b.Property<bool>("AttitudeIndifferent")
                        .HasColumnType("bit");

                    b.Property<bool>("AttitudeUncooperative")
                        .HasColumnType("bit");

                    b.Property<bool>("BalanceFallingDown")
                        .HasColumnType("bit");

                    b.Property<bool>("BalanceNeededSupport")
                        .HasColumnType("bit");

                    b.Property<bool>("BalanceNormal")
                        .HasColumnType("bit");

                    b.Property<bool>("BalanceSwaying")
                        .HasColumnType("bit");

                    b.Property<bool>("BalanceUnsteady")
                        .HasColumnType("bit");

                    b.Property<string>("ClothingDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ClothingDisorderly")
                        .HasColumnType("bit");

                    b.Property<bool>("ClothingOrderly")
                        .HasColumnType("bit");

                    b.Property<bool>("ClothingSoiled")
                        .HasColumnType("bit");

                    b.Property<bool>("ClothingStained")
                        .HasColumnType("bit");

                    b.Property<bool>("ClothingTorn")
                        .HasColumnType("bit");

                    b.Property<int>("DefendantId")
                        .HasColumnType("int");

                    b.Property<string>("Drecomments")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DREComments");

                    b.Property<string>("DrenotPerformedExplaination")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DRENotPerformedExplaination");

                    b.Property<bool>("Dreperformed")
                        .HasColumnType("bit")
                        .HasColumnName("DREPerformed");

                    b.Property<bool>("Drepresent")
                        .HasColumnType("bit")
                        .HasColumnName("DREPresent");

                    b.Property<bool>("DrugGroupAnalgesic")
                        .HasColumnType("bit");

                    b.Property<bool>("DrugGroupAnesthetics")
                        .HasColumnType("bit");

                    b.Property<bool>("DrugGroupCannabis")
                        .HasColumnType("bit");

                    b.Property<bool>("DrugGroupCnsdepressant")
                        .HasColumnType("bit")
                        .HasColumnName("DrugGroupCNSDepressant");

                    b.Property<bool>("DrugGroupCnsstimulant")
                        .HasColumnType("bit")
                        .HasColumnName("DrugGroupCNSStimulant");

                    b.Property<bool>("DrugGroupHallucinogen")
                        .HasColumnType("bit");

                    b.Property<bool>("DrugGroupInhalant")
                        .HasColumnType("bit");

                    b.Property<bool>("EyesDialated")
                        .HasColumnType("bit");

                    b.Property<bool>("EyesDroopyEyelids")
                        .HasColumnType("bit");

                    b.Property<bool>("EyesNormal")
                        .HasColumnType("bit");

                    b.Property<bool>("EyesRed")
                        .HasColumnType("bit");

                    b.Property<bool>("EyesWatering")
                        .HasColumnType("bit");

                    b.Property<int?>("ImpairmentAlcoholDrug")
                        .HasColumnType("int");

                    b.Property<int?>("OdorStrength")
                        .HasColumnType("int");

                    b.Property<string>("OtherObservationsComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SpeakingIncoherent")
                        .HasColumnType("bit");

                    b.Property<bool>("SpeakingNormal")
                        .HasColumnType("bit");

                    b.Property<bool>("SpeakingSlowMumbled")
                        .HasColumnType("bit");

                    b.Property<bool>("SpeakingSlurred")
                        .HasColumnType("bit");

                    b.Property<bool>("SpeakingThickTongued")
                        .HasColumnType("bit");

                    b.Property<string>("UnusualActionsObserved")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("WalkingFalling")
                        .HasColumnType("bit");

                    b.Property<bool>("WalkingHeavyFooted")
                        .HasColumnType("bit");

                    b.Property<bool>("WalkingNormal")
                        .HasColumnType("bit");

                    b.Property<bool>("WalkingStaggering")
                        .HasColumnType("bit");

                    b.Property<bool>("WalkingSwaying")
                        .HasColumnType("bit");

                    b.Property<string>("WhoPerformedDre")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("WhoPerformedDRE");

                    b.Property<string>("WhySuspected")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DefendantObservationId");

                    b.HasIndex(new[] { "AlcoholTypeId" }, "IX_DefendantObservations_AlcoholTypeId");

                    b.HasIndex(new[] { "DefendantId" }, "IX_DefendantObservations_DefendantId")
                        .IsUnique();

                    b.ToTable("DefendantObservations", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DefendantOccupationAddress", b =>
                {
                    b.Property<int>("DefendantOccupationAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DefendantOccupationAddressId"));

                    b.Property<int>("DefendantId")
                        .HasColumnType("int");

                    b.Property<string>("OccAddress1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OccAddress2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OccCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OccZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.HasKey("DefendantOccupationAddressId");

                    b.HasIndex(new[] { "StateId" }, "IX_DefendantOccupationAddress_StateId");

                    b.ToTable("DefendantOccupationAddress", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DefendantPhone", b =>
                {
                    b.Property<int>("DefendantPhoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DefendantPhoneId"));

                    b.Property<bool>("ContactNumber")
                        .HasColumnType("bit");

                    b.Property<int>("DefendantId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("PhoneTypeId")
                        .HasColumnType("int");

                    b.HasKey("DefendantPhoneId");

                    b.HasIndex(new[] { "DefendantId" }, "IX_DefendantPhones_DefendantId");

                    b.HasIndex(new[] { "PhoneTypeId" }, "IX_DefendantPhones_PhoneTypeId");

                    b.ToTable("DefendantPhones", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DefendantStatement", b =>
                {
                    b.Property<int>("DefendantStatementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DefendantStatementId"));

                    b.Property<string>("Address1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Address2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("AddressGroupId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("CountyId")
                        .HasColumnType("int");

                    b.Property<int>("DefendantId")
                        .HasColumnType("int");

                    b.Property<bool?>("DefendantRefusedStatement")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<bool?>("DidEmsresponse")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("DidEMSResponse")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<double>("Lat")
                        .HasColumnType("float");

                    b.Property<bool>("LeaveBusinessServedAlcohol")
                        .HasColumnType("bit");

                    b.Property<double>("Lng")
                        .HasColumnType("float");

                    b.Property<string>("NameOfBusiness")
                        .HasMaxLength(511)
                        .HasColumnType("nvarchar(511)");

                    b.Property<string>("NamesOfEmsunit")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("NamesOfEMSUnit");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("StatementAfterArrested")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Under21AlcoholConsumeLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("WhatTheyDid")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("WhoObservedDrinking")
                        .HasMaxLength(511)
                        .HasColumnType("nvarchar(511)");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("DefendantStatementId");

                    b.HasIndex(new[] { "AddressGroupId" }, "IX_DefendantStatements_AddressGroupId");

                    b.HasIndex(new[] { "CountyId" }, "IX_DefendantStatements_CountyId");

                    b.HasIndex(new[] { "DefendantId" }, "IX_DefendantStatements_DefendantId")
                        .IsUnique();

                    b.HasIndex(new[] { "StateId" }, "IX_DefendantStatements_StateId");

                    b.ToTable("DefendantStatements", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DistrictAttorneyCounty", b =>
                {
                    b.Property<int>("DacountyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DACountyId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DacountyId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("CountyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.HasKey("DacountyId")
                        .HasName("pk_DistrictAttorneyCounties");

                    b.ToTable("DistrictAttorneyCounties");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.Document", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DocumentTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("FileTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ObjectId")
                        .HasColumnType("int");

                    b.Property<int?>("ObjectTypeId")
                        .HasColumnType("int");

                    b.Property<string>("OriginalFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhysicalFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("DocumentId");

                    b.HasIndex(new[] { "DocumentTypeId" }, "IX_Documents_DocumentTypeId");

                    b.HasIndex(new[] { "FileTypeId" }, "IX_Documents_FileTypeId");

                    b.ToTable("Documents", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DuiCaseNote", b =>
                {
                    b.Property<int>("DuiCaseNoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DuiCaseNoteId"));

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DuiCaseId")
                        .HasColumnType("int");

                    b.Property<int>("DuiCaseNoteTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DuiCaseNoteId");

                    b.HasIndex(new[] { "DuiCaseId" }, "IX_DUI_CASE_NOTES_DuiCaseId");

                    b.HasIndex(new[] { "DuiCaseNoteTypeId" }, "IX_DUI_CASE_NOTES_DuiCaseNoteTypeId");

                    b.ToTable("DUI_CASE_NOTES", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DuiCaseNoteType", b =>
                {
                    b.Property<int>("DuiCaseNoteTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DuiCaseNoteTypeId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("DuiCasePageId")
                        .HasColumnType("int");

                    b.Property<int>("NoteOrder")
                        .HasColumnType("int");

                    b.Property<string>("Section")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("DuiCaseNoteTypeId");

                    b.HasIndex(new[] { "DuiCasePageId" }, "IX_DUI_CASE_NOTE_TYPES_DuiCasePageId");

                    b.ToTable("DUI_CASE_NOTE_TYPES", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.EvidenceDocument", b =>
                {
                    b.Property<int>("EvidenceDocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EvidenceDocumentId"));

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.Property<int?>("DocumentTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Uploaded")
                        .HasColumnType("datetime2");

                    b.Property<string>("UploadedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EvidenceDocumentId");

                    b.HasIndex(new[] { "CaseId" }, "IX_EvidenceDocuments_CaseId");

                    b.HasIndex(new[] { "DocumentId" }, "IX_EvidenceDocuments_DocumentId");

                    b.ToTable("EvidenceDocuments", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.EvidenceRecording", b =>
                {
                    b.Property<int>("EvidenceRecordingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EvidenceRecordingId"));

                    b.Property<string>("EvidenceNumber")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("Fst")
                        .HasColumnType("bit")
                        .HasColumnName("FST");

                    b.Property<bool?>("HasVideoTape")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<bool>("IntoxicationInvestigation")
                        .HasColumnType("bit");

                    b.Property<string>("NameOfOfficer")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NoTapeExplain")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("OnBoatRecording")
                        .HasColumnType("bit");

                    b.Property<bool>("OnBodyCameraRecording")
                        .HasColumnType("bit");

                    b.Property<bool>("OnShoreRecording")
                        .HasColumnType("bit");

                    b.Property<string>("OtherActions")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("PhysicalEvidenceId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TimeBegan")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TimeStop")
                        .HasColumnType("datetime2");

                    b.Property<bool>("TransportToJail")
                        .HasColumnType("bit");

                    b.HasKey("EvidenceRecordingId");

                    b.HasIndex(new[] { "PhysicalEvidenceId" }, "IX_EvidenceRecordings_PhysicalEvidenceId");

                    b.ToTable("EvidenceRecordings", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.FieldSobrietyTest", b =>
                {
                    b.Property<int>("FieldSobrietyTestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FieldSobrietyTestId"));

                    b.Property<bool>("AttachNote")
                        .HasColumnType("bit");

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<bool>("DefMoreThan65")
                        .HasColumnType("bit");

                    b.Property<bool>("DefendantRefused")
                        .HasColumnType("bit");

                    b.Property<bool>("Fstgiven")
                        .HasColumnType("bit")
                        .HasColumnName("FSTGiven");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("OnWater")
                        .HasColumnType("bit");

                    b.Property<bool>("PhysicalInjuries")
                        .HasColumnType("bit");

                    b.Property<bool>("PhysicalProblem")
                        .HasColumnType("bit");

                    b.Property<string>("PhysicalProblemDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SeatedFst")
                        .HasColumnType("bit")
                        .HasColumnName("SeatedFST");

                    b.Property<bool>("TimeAshore")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("TimeAshoreDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TimeStartedFst")
                        .HasColumnType("datetime2")
                        .HasColumnName("TimeStartedFST");

                    b.Property<bool>("WaterTestGiven")
                        .HasColumnType("bit");

                    b.Property<string>("WhyNotGivenFst")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("WhyNotGivenFST");

                    b.Property<string>("WhyNotWaterTest")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FieldSobrietyTestId");

                    b.HasIndex(new[] { "CaseId" }, "IX_FieldSobrietyTests_CaseId");

                    b.ToTable("FieldSobrietyTests", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.FstFingerToNoseTest", b =>
                {
                    b.Property<int>("FingerToNoseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FingerToNoseId"));

                    b.Property<bool>("BringDownLeft1")
                        .HasColumnType("bit");

                    b.Property<bool>("BringDownLeft2")
                        .HasColumnType("bit");

                    b.Property<bool>("BringDownLeft3")
                        .HasColumnType("bit");

                    b.Property<bool>("BringDownRight1")
                        .HasColumnType("bit");

                    b.Property<bool>("BringDownRight2")
                        .HasColumnType("bit");

                    b.Property<bool>("BringDownRight3")
                        .HasColumnType("bit");

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("FingerTipLeft1")
                        .HasColumnType("bit");

                    b.Property<bool>("FingerTipLeft2")
                        .HasColumnType("bit");

                    b.Property<bool>("FingerTipLeft3")
                        .HasColumnType("bit");

                    b.Property<bool>("FingerTipRight1")
                        .HasColumnType("bit");

                    b.Property<bool>("FingerTipRight2")
                        .HasColumnType("bit");

                    b.Property<bool>("FingerTipRight3")
                        .HasColumnType("bit");

                    b.Property<bool>("HesitatedLeft1")
                        .HasColumnType("bit");

                    b.Property<bool>("HesitatedLeft2")
                        .HasColumnType("bit");

                    b.Property<bool>("HesitatedLeft3")
                        .HasColumnType("bit");

                    b.Property<bool>("HesitatedRight1")
                        .HasColumnType("bit");

                    b.Property<bool>("HesitatedRight2")
                        .HasColumnType("bit");

                    b.Property<bool>("HesitatedRight3")
                        .HasColumnType("bit");

                    b.Property<bool>("MissedNoseLeft1")
                        .HasColumnType("bit");

                    b.Property<bool>("MissedNoseLeft2")
                        .HasColumnType("bit");

                    b.Property<bool>("MissedNoseLeft3")
                        .HasColumnType("bit");

                    b.Property<bool>("MissedNoseRight1")
                        .HasColumnType("bit");

                    b.Property<bool>("MissedNoseRight2")
                        .HasColumnType("bit");

                    b.Property<bool>("MissedNoseRight3")
                        .HasColumnType("bit");

                    b.Property<bool>("MovedHead")
                        .HasColumnType("bit");

                    b.Property<string>("MovedHeadDesc")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("NotCloseEyes")
                        .HasColumnType("bit");

                    b.Property<string>("NotCloseEyesDesc")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("NotTiltHead")
                        .HasColumnType("bit");

                    b.Property<string>("NotTiltHeadDesc")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("NumberOfClues")
                        .HasColumnType("int");

                    b.Property<bool>("OpenEyes")
                        .HasColumnType("bit");

                    b.Property<string>("OpenEyesDesc")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("ReasonNotGiven")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("SearchedLeft1")
                        .HasColumnType("bit");

                    b.Property<bool>("SearchedLeft2")
                        .HasColumnType("bit");

                    b.Property<bool>("SearchedLeft3")
                        .HasColumnType("bit");

                    b.Property<bool>("SearchedRight1")
                        .HasColumnType("bit");

                    b.Property<bool>("SearchedRight2")
                        .HasColumnType("bit");

                    b.Property<bool>("SearchedRight3")
                        .HasColumnType("bit");

                    b.Property<bool>("StartWrongTime")
                        .HasColumnType("bit");

                    b.Property<string>("StartWrongTimeDesc")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("StatedFingerToNose")
                        .HasColumnType("bit");

                    b.Property<bool>("StoppedTest")
                        .HasColumnType("bit");

                    b.Property<bool>("TestGiven")
                        .HasColumnType("bit");

                    b.Property<bool>("UnableToFollow")
                        .HasColumnType("bit");

                    b.Property<string>("UnableToFollowDesc")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("WrongFingerLeft1")
                        .HasColumnType("bit");

                    b.Property<bool>("WrongFingerLeft2")
                        .HasColumnType("bit");

                    b.Property<bool>("WrongFingerLeft3")
                        .HasColumnType("bit");

                    b.Property<bool>("WrongFingerRight1")
                        .HasColumnType("bit");

                    b.Property<bool>("WrongFingerRight2")
                        .HasColumnType("bit");

                    b.Property<bool>("WrongFingerRight3")
                        .HasColumnType("bit");

                    b.Property<bool>("WrongHandLeft1")
                        .HasColumnType("bit");

                    b.Property<bool>("WrongHandLeft2")
                        .HasColumnType("bit");

                    b.Property<bool>("WrongHandLeft3")
                        .HasColumnType("bit");

                    b.Property<bool>("WrongHandRight1")
                        .HasColumnType("bit");

                    b.Property<bool>("WrongHandRight2")
                        .HasColumnType("bit");

                    b.Property<bool>("WrongHandRight3")
                        .HasColumnType("bit");

                    b.HasKey("FingerToNoseId");

                    b.HasIndex(new[] { "CaseId" }, "IX_FST_FingerToNoseTests_CaseId");

                    b.ToTable("FST_FingerToNoseTests", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.FstHandCoordination", b =>
                {
                    b.Property<int>("HandCoordinationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HandCoordinationId"));

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<bool>("ClappingImproperCount")
                        .HasColumnType("bit");

                    b.Property<string>("ClappingImproperCountDesc")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("ClappingImproperReturn")
                        .HasColumnType("bit");

                    b.Property<string>("ClappingImproperReturnDesc")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("ClappingImproperTouch")
                        .HasColumnType("bit");

                    b.Property<string>("ClappingImproperTouchDesc")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("ClappingNotPerform")
                        .HasColumnType("bit");

                    b.Property<string>("ClappingNotPerformDesc")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EndPositionNotPerform")
                        .HasColumnType("bit");

                    b.Property<string>("EndPositionNotPerformDesc")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("ForwardImproperCount")
                        .HasColumnType("bit");

                    b.Property<string>("ForwardImproperCountDesc")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("ForwardImproperTouch")
                        .HasColumnType("bit");

                    b.Property<string>("ForwardImproperTouchDesc")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("ForwardNotPerform")
                        .HasColumnType("bit");

                    b.Property<string>("ForwardNotPerformDesc")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("ImproperPosition")
                        .HasColumnType("bit");

                    b.Property<string>("ImproperPositionDesc")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("NotReturnToChest")
                        .HasColumnType("bit");

                    b.Property<string>("NotReturnToChestDesc")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("ReasonNotGiven")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ReturnImproperCount")
                        .HasColumnType("bit");

                    b.Property<string>("ReturnImproperCountDesc")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("ReturnImproperTouch")
                        .HasColumnType("bit");

                    b.Property<string>("ReturnImproperTouchDesc")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("ReturnNotPerform")
                        .HasColumnType("bit");

                    b.Property<string>("ReturnNotPerformDesc")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("StartWrongTime")
                        .HasColumnType("bit");

                    b.Property<string>("StartWrongTimeDesc")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("StatedHardCoordination")
                        .HasColumnType("bit");

                    b.Property<bool>("StoppedTest")
                        .HasColumnType("bit");

                    b.Property<bool>("TestGiven")
                        .HasColumnType("bit");

                    b.Property<int>("TotalClues")
                        .HasColumnType("int");

                    b.Property<bool>("UnableToFollow")
                        .HasColumnType("bit");

                    b.Property<string>("UnableToFollowDesc")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("HandCoordinationId");

                    b.HasIndex(new[] { "CaseId" }, "IX_FST_HandCoordination_CaseId");

                    b.ToTable("FST_HandCoordination", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.FstHgntest", b =>
                {
                    b.Property<int>("Hgnid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("HGNId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Hgnid"));

                    b.Property<bool>("AngelOfOnset")
                        .HasColumnType("bit");

                    b.Property<string>("AngelOnsetNystaghums")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DefFacingFlashLight")
                        .HasColumnType("bit");

                    b.Property<bool>("EqualPupilSize")
                        .HasColumnType("bit");

                    b.Property<string>("EqualPupilSizeExplain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EqualTracking")
                        .HasColumnType("bit");

                    b.Property<string>("FlashLightExplain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("FollowStimulus")
                        .HasColumnType("bit");

                    b.Property<string>("FollowStimulusExplain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ForwardEmergencyLightsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("HeadInjuries")
                        .HasColumnType("bit");

                    b.Property<string>("HeadInjuryExplain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Hgngiven")
                        .HasColumnType("bit")
                        .HasColumnName("HGNGiven");

                    b.Property<string>("LackOfPursuit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LackOfPursuitLeft")
                        .HasColumnType("bit");

                    b.Property<bool>("LackOfPursuitRight")
                        .HasColumnType("bit");

                    b.Property<bool>("MaxDeviationLeft")
                        .HasColumnType("bit");

                    b.Property<bool>("MaxDeviationRight")
                        .HasColumnType("bit");

                    b.Property<string>("MaximumDeviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NystaghumsPrior")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NystaghumsPriorLeft")
                        .HasColumnType("bit");

                    b.Property<bool>("NystaghumsPriorRight")
                        .HasColumnType("bit");

                    b.Property<string>("ReasonNotGiven")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RestingNystaghums")
                        .HasColumnType("bit");

                    b.Property<bool>("StatedHgn")
                        .HasColumnType("bit")
                        .HasColumnName("StatedHGN");

                    b.Property<bool>("StimulusAboveEyeLevel")
                        .HasColumnType("bit");

                    b.Property<int>("TotalHgnclues")
                        .HasColumnType("int")
                        .HasColumnName("TotalHGNClues");

                    b.Property<bool>("VerticalNystaghums")
                        .HasColumnType("bit");

                    b.Property<bool>("WearGlass")
                        .HasColumnType("bit");

                    b.Property<string>("WearGlassExplain")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Hgnid");

                    b.HasIndex(new[] { "CaseId" }, "IX_FST_HGNTests_CaseId");

                    b.ToTable("FST_HGNTests", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.FstOneLegStandTest", b =>
                {
                    b.Property<int>("OneLegStandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OneLegStandId"));

                    b.Property<string>("ArmsBalanceDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FootRaised")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("FootStoodOn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FootWearId")
                        .HasColumnType("int");

                    b.Property<bool>("Hops")
                        .HasColumnType("bit");

                    b.Property<string>("HopsDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KeepBalanceExplain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NotKeepBalance")
                        .HasColumnType("bit");

                    b.Property<int>("OneLegClues")
                        .HasColumnType("int");

                    b.Property<bool>("OneLegStandGiven")
                        .HasColumnType("bit");

                    b.Property<bool>("PutsFootDown")
                        .HasColumnType("bit");

                    b.Property<string>("PutsFootDownDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonNotGiven")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("StatedOneLegStand")
                        .HasColumnType("bit");

                    b.Property<bool>("Sways")
                        .HasColumnType("bit");

                    b.Property<string>("SwaysDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TestStopped")
                        .HasColumnType("bit");

                    b.Property<bool>("UseArmsToBalance")
                        .HasColumnType("bit");

                    b.HasKey("OneLegStandId");

                    b.HasIndex(new[] { "CaseId" }, "IX_FST_OneLegStandTests_CaseId");

                    b.HasIndex(new[] { "FootWearId" }, "IX_FST_OneLegStandTests_FootWearId");

                    b.ToTable("FST_OneLegStandTests", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.FstOtherTest", b =>
                {
                    b.Property<int>("OtherTestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OtherTestId"));

                    b.Property<string>("AlphabetTestDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AlphabetTestGiven")
                        .HasColumnType("bit");

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<string>("FingerCountDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("FingerCountGiven")
                        .HasColumnType("bit");

                    b.Property<string>("OtherTestDesc")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OtherTestId");

                    b.HasIndex(new[] { "CaseId" }, "IX_FST_OtherTests_CaseId");

                    b.ToTable("FST_OtherTests", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.FstPalmPatTest", b =>
                {
                    b.Property<int>("PalmPatTestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PalmPatTestId"));

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<bool>("ChoppedPat")
                        .HasColumnType("bit");

                    b.Property<string>("ChoppedPatDesc")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Comments")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("DoublePat")
                        .HasColumnType("bit");

                    b.Property<string>("DoublePatDesc")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("NotCounted")
                        .HasColumnType("bit");

                    b.Property<string>("NotCountedDesc")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("NotIncreaseSpeed")
                        .HasColumnType("bit");

                    b.Property<string>("NotIncreaseSpeedDesc")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("OtherImproperPat")
                        .HasColumnType("bit");

                    b.Property<string>("OtherImproperPatDesc")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("ReasonNotGiven")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RolledHandDesc")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("RolledHands")
                        .HasColumnType("bit");

                    b.Property<bool>("RotatedHands")
                        .HasColumnType("bit");

                    b.Property<string>("RotatedHandsDesc")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("StartWrongTime")
                        .HasColumnType("bit");

                    b.Property<string>("StartWrongTimeDesc")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("StatedPalmPat")
                        .HasColumnType("bit");

                    b.Property<bool>("StoppedBeforeTold")
                        .HasColumnType("bit");

                    b.Property<string>("StoppedBeforeToldDesc")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("StoppedTest")
                        .HasColumnType("bit");

                    b.Property<bool>("TestGiven")
                        .HasColumnType("bit");

                    b.Property<int>("TotalPalmPatClues")
                        .HasColumnType("int");

                    b.Property<bool>("UnableToFollow")
                        .HasColumnType("bit");

                    b.Property<string>("UnableToFollowDesc")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("PalmPatTestId");

                    b.HasIndex(new[] { "CaseId" }, "IX_FST_PalmPatTests_CaseId");

                    b.ToTable("FST_PalmPatTests", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.FstWalkAndTurnTest", b =>
                {
                    b.Property<int>("WalkAndTurnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WalkAndTurnId"));

                    b.Property<string>("ArmsBalanceDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KeepBalanceExplain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("MissHeelToe")
                        .HasColumnType("bit");

                    b.Property<string>("MissHeelToeDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NotKeepBalance")
                        .HasColumnType("bit");

                    b.Property<string>("ReasonNotGiven")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StartSoonDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("StartTooSoon")
                        .HasColumnType("bit");

                    b.Property<bool>("StatedWalkTurn")
                        .HasColumnType("bit");

                    b.Property<bool>("StepOffLine")
                        .HasColumnType("bit");

                    b.Property<string>("StepsOffLineDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StopWalkDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("StopWhileWalk")
                        .HasColumnType("bit");

                    b.Property<bool>("TestStopped")
                        .HasColumnType("bit");

                    b.Property<bool>("TurnImproperly")
                        .HasColumnType("bit");

                    b.Property<string>("TurnImproperlyDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("UseArmsToBalance")
                        .HasColumnType("bit");

                    b.Property<int>("WalkAndTurnClues")
                        .HasColumnType("int");

                    b.Property<bool>("WalkTurnGiven")
                        .HasColumnType("bit");

                    b.Property<bool>("WrongSteps")
                        .HasColumnType("bit");

                    b.Property<string>("WrongStepsDesc")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WalkAndTurnId");

                    b.HasIndex(new[] { "CaseId" }, "IX_FST_WalkAndTurnTests_CaseId");

                    b.ToTable("FST_WalkAndTurnTests", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.Hash", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Field")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ExpireAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key", "Field")
                        .HasName("PK_HangFire_Hash");

                    b.HasIndex(new[] { "ExpireAt" }, "IX_HangFire_Hash_ExpireAt")
                        .HasFilter("([ExpireAt] IS NOT NULL)");

                    b.ToTable("Hash", "HangFire");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.Job", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Arguments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ExpireAt")
                        .HasColumnType("datetime");

                    b.Property<string>("InvocationData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("StateId")
                        .HasColumnType("bigint");

                    b.Property<string>("StateName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id")
                        .HasName("PK_HangFire_Job");

                    b.HasIndex(new[] { "ExpireAt" }, "IX_HangFire_Job_ExpireAt")
                        .HasFilter("([ExpireAt] IS NOT NULL)");

                    b.HasIndex(new[] { "StateName" }, "IX_HangFire_Job_StateName")
                        .HasFilter("([StateName] IS NOT NULL)");

                    b.ToTable("Job", "HangFire");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.JobParameter", b =>
                {
                    b.Property<long>("JobId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JobId", "Name")
                        .HasName("PK_HangFire_JobParameter");

                    b.ToTable("JobParameter", "HangFire");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.JobQueue", b =>
                {
                    b.Property<string>("Queue")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("FetchedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("JobId")
                        .HasColumnType("bigint");

                    b.HasKey("Queue", "Id")
                        .HasName("PK_HangFire_JobQueue");

                    b.ToTable("JobQueue", "HangFire");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.Judge", b =>
                {
                    b.Property<int>("JudgeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JudgeId"));

                    b.Property<string>("CourtNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JudgeId");

                    b.ToTable("Judges");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.JudgeCounty", b =>
                {
                    b.Property<int>("JudgeCountyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JudgeCountyId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("CountyId")
                        .HasColumnType("int");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.HasKey("JudgeCountyId")
                        .HasName("pk_JudgeCounties");

                    b.ToTable("JudgeCounties");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.JudgeCourtType", b =>
                {
                    b.Property<int>("JudgeId")
                        .HasColumnType("int");

                    b.Property<int>("CourtTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.HasKey("JudgeId", "CourtTypeId");

                    b.HasIndex(new[] { "CourtTypeId" }, "IX_JudgeCourtType_CourtTypeId");

                    b.ToTable("JudgeCourtType");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.List", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ExpireAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key", "Id")
                        .HasName("PK_HangFire_List");

                    b.HasIndex(new[] { "ExpireAt" }, "IX_HangFire_List_ExpireAt")
                        .HasFilter("([ExpireAt] IS NOT NULL)");

                    b.ToTable("List", "HangFire");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.LoginHistory", b =>
                {
                    b.Property<int>("AuditLoginId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Audit_Login_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditLoginId"));

                    b.Property<DateTime>("AttemptDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Attempt_Date");

                    b.Property<string>("City")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ContinentCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Continent_Code");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Country_Code");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Ip_Address");

                    b.Property<string>("Latitude")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Longitude")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RegionCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Region_Code");

                    b.Property<bool>("Success")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("User_Id");

                    b.Property<string>("UserName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("User_Name");

                    b.Property<string>("Zip")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("AuditLoginId")
                        .HasName("pk_LoginHistory");

                    b.ToTable("LoginHistory");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.LuAccidentType", b =>
                {
                    b.Property<int>("AccidentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccidentId"));

                    b.Property<string>("AccidentDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.HasKey("AccidentId");

                    b.ToTable("LU_AccidentType");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.LuAddressType", b =>
                {
                    b.Property<int>("AddressTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressTypeId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("AddressIcon")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AddressTypeName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Nibrscode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("NIBRSCode");

                    b.Property<bool>("PlaceNameRequired")
                        .HasColumnType("bit");

                    b.Property<bool>("RequiresVehicle")
                        .HasColumnType("bit");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("AddressTypeId");

                    b.ToTable("LU_AddressType");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.LuAlcoholType", b =>
                {
                    b.Property<int>("AlcoholTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AlcoholTypeId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Alcohol")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("AlcoholTypeId");

                    b.ToTable("LU_AlcoholType");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.LuBodyOfWaterType", b =>
                {
                    b.Property<int>("BodyOfWaterTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BodyOfWaterTypeId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("BodyOfWater")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.HasKey("BodyOfWaterTypeId");

                    b.ToTable("LU_BodyOfWaterType");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.LuBwimotorType", b =>
                {
                    b.Property<int>("BwimotorTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BWIMotorTypeId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BwimotorTypeId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Bwimotor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("BWIMotor");

                    b.HasKey("BwimotorTypeId");

                    b.ToTable("LU_BWIMotorType");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.LuBwivesselType", b =>
                {
                    b.Property<int>("BwivesselTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BWIVesselTypeId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BwivesselTypeId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Bwivessel")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("BWIVessel");

                    b.HasKey("BwivesselTypeId");

                    b.ToTable("LU_BWIVesselType");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.LuCounty", b =>
                {
                    b.Property<int>("CountyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountyId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("CountyFullName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("CountyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.HasKey("CountyId");

                    b.ToTable("LU_County");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.LuCourtType", b =>
                {
                    b.Property<int>("CourtTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourtTypeId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("CourtTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("CourtTypeId");

                    b.ToTable("LU_CourtType");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.LuDisabilityBias", b =>
                {
                    b.Property<int>("DisabilityBiasId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DisabilityBiasId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("DisabilityBiasName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("DisabilityBiasId");

                    b.ToTable("LU_DisabilityBias");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.LuDpsdrugList", b =>
                {
                    b.Property<int>("DpsdrugId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DPSDrugId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DpsdrugId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Dpsdrug")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("DPSDrug");

                    b.Property<string>("DpsdrugCategory")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("DPSDrugCategory");

                    b.HasKey("DpsdrugId");

                    b.ToTable("LU_DPSDrugList");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.LuEducationLevel", b =>
                {
                    b.Property<int>("EducationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EducationId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("EducationDescription")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("EducationId");

                    b.ToTable("LU_EducationLevels");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.LuEthnicity", b =>
                {
                    b.Property<int>("EthnicityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EthnicityId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("EthnicityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nibrscode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("NIBRSCode");

                    b.HasKey("EthnicityId");

                    b.ToTable("LU_Ethnicity");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.LuEyeColor", b =>
                {
                    b.Property<int>("EyeColorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EyeColorId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("EyeColorName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nciccode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("NCICCode");

                    b.HasKey("EyeColorId");

                    b.ToTable("LU_EyeColor");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.LuFootwearType", b =>
                {
                    b.Property<int>("FootwearId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FootwearId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("FootwearDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("FootwearId");

                    b.ToTable("LU_FootwearType");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.LuGenderBias", b =>
                {
                    b.Property<int>("GenderBiasId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenderBiasId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("GenderBiasName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("GenderBiasId");

                    b.ToTable("LU_GenderBias");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.LuGenderIdentityBias", b =>
                {
                    b.Property<int>("GenderIdentityBiasId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenderIdentityBiasId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("GenderIdentityBiasName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("GenderIdentityBiasId");

                    b.ToTable("LU_GenderIdentityBias");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.LuHairColor", b =>
                {
                    b.Property<int>("HairColorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HairColorId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("HairColorName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("HairColorId");

                    b.ToTable("LU_HairColor");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.LuInjuryType", b =>
                {
                    b.Property<int>("InjuryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InjuryId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("InjuryDescription")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("InjuryId");

                    b.ToTable("LU_InjuryType");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.LuIntegrationVendor", b =>
                {
                    b.Property<int>("VendorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VendorId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("VendorGraphicUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("VendorGraphicURL");

                    b.Property<string>("VendorName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("VendorPdfbuttonText")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("VendorPDFButtonText");

                    b.Property<string>("VendorPdfverbiage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("VendorPDFVerbiage");

                    b.Property<string>("VendorSystemName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("VendorXmlbuttonText")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("VendorXMLButtonText");

                    b.Property<string>("VendorXmlverbiage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("VendorXMLVerbiage");

                    b.HasKey("VendorId");

                    b.ToTable("LU_IntegrationVendors");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.LuInterviewQuestion", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("QuestionOrder")
                        .HasColumnType("int");

                    b.HasKey("QuestionId");

                    b.ToTable("LU_InterviewQuestions");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.LuIntoxVerifyTemp", b =>
                {
                    b.Property<int>("VerifyTempId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VerifyTempId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("VerifyTemp")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("VerifyTempId");

                    b.ToTable("LU_IntoxVerifyTemp");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.LuLightCondition", b =>
                {
                    b.Property<int>("LightId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LightId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("LightId");

                    b.ToTable("LU_LightCondition");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.LuMoreLessIntoxicated", b =>
                {
                    b.Property<int>("MoreLessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MoreLessId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("MoreLessId");

                    b.ToTable("LU_MoreLessIntoxicated");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.LuNcicboatShape", b =>
                {
                    b.Property<int>("BodyStyleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BodyStyleId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Nciccode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("NCICCode");

                    b.Property<int>("TransportTypeId")
                        .HasColumnType("int");

                    b.HasKey("BodyStyleId");

                    b.ToTable("LU_NCICBoatShape");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.LuNciccolor", b =>
                {
                    b.Property<int>("ColorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ColorId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Nciccode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("NCICCode");

                    b.HasKey("ColorId");

                    b.ToTable("LU_NCICColor");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.LuNcicinstruction", b =>
                {
                    b.Property<int>("InstructionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstructionId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Instruction")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("TransportModeId")
                        .HasColumnType("int");

                    b.HasKey("InstructionId");

                    b.ToTable("LU_NCICInstructions");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.LuNciclabel", b =>
                {
                    b.Property<int>("LabelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LabelId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LabelName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nciccode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("NCICCode");

                    b.Property<int>("TransportModeId")
                        .HasColumnType("int");

                    b.HasKey("LabelId");

                    b.ToTable("LU_NCICLabels");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.LuNcicmake", b =>
                {
                    b.Property<int>("MakeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MakeId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Comments")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Nciccode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("NCICCode");

                    b.Property<int>("TransportTypeId")
                        .HasColumnType("int");

                    b.HasKey("MakeId");

                    b.ToTable("LU_NCICMakes");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.LuNcictransportMode", b =>
                {
                    b.Property<int>("TransportModeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransportModeId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("TransportModeId");

                    b.ToTable("LU_NCICTransportModes");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.LuNcictransportType", b =>
                {
                    b.Property<int>("TransportTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransportTypeId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("TransportModeId")
                        .HasColumnType("int");

                    b.HasKey("TransportTypeId");

                    b.ToTable("LU_NCICTransportTypes");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.LuNcicvehicleModel", b =>
                {
                    b.Property<int>("VehicleModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleModelId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("MakeId")
                        .HasColumnType("int");

                    b.Property<string>("Nciccode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("NCICCode");

                    b.Property<string>("OrigDescription")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("VehicleModelId");

                    b.ToTable("LU_NCICVehicleModels");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.LuNcicvehicleStyle", b =>
                {
                    b.Property<int>("VehicleStyleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleStyleId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Comments")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Nciccode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("NCICCode");

                    b.Property<int>("TransportTypeId")
                        .HasColumnType("int");

                    b.HasKey("VehicleStyleId");

                    b.ToTable("LU_NCICVehicleStyle");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.LuOffense", b =>
                {
                    b.Property<int>("OffenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OffenseId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<bool>("OffenseAssult")
                        .HasColumnType("bit");

                    b.Property<bool>("OffenseBwi")
                        .HasColumnType("bit")
                        .HasColumnName("OffenseBWI");

                    b.Property<string>("OffenseCitation")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("OffenseClassification")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OffenseCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("OffenseComplaintId")
                        .HasColumnType("int");

                    b.Property<string>("OffenseDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("OffenseFelony")
                        .HasColumnType("bit");

                    b.Property<bool>("OffenseIntoxilyzer")
                        .HasColumnType("bit");

                    b.Property<bool>("OffenseManslaughter")
                        .HasColumnType("bit");

                    b.Property<bool>("OffenseMinor")
                        .HasColumnType("bit");

                    b.Property<bool>("OffenseMinors")
                        .HasColumnType("bit");

                    b.Property<bool>("OffenseOpenContainer")
                        .HasColumnType("bit");

                    b.Property<int>("OffenseOrder")
                        .HasColumnType("int");

                    b.Property<bool>("OffensePriors")
                        .HasColumnType("bit");

                    b.Property<string>("OffenseSubtitle")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OffenseTitle")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("OffenseType")
                        .HasColumnType("int");

                    b.HasKey("OffenseId");

                    b.ToTable("LU_Offenses");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.LuOffenseTypeLocation", b =>
                {
                    b.Property<int>("ZoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ZoneId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Zone")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("ZoneId");

                    b.ToTable("LU_OffenseTypeLocation");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.LuOperatorOccupation", b =>
                {
                    b.Property<int>("OperatorOccupationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OperatorOccupationId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Occupation")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("OperatorOccupationId");

                    b.ToTable("LU_OperatorOccupation");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.LuPhoneType", b =>
                {
                    b.Property<int>("PhoneTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhoneTypeId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneIcon")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneTypeName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PhoneTypeId");

                    b.ToTable("LU_PhoneType");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.LuRace", b =>
                {
                    b.Property<int>("RaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RaceId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Nibrscode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("NIBRSCode");

                    b.Property<string>("RaceName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RaceId");

                    b.ToTable("LU_Race");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.LuRaceBias", b =>
                {
                    b.Property<int>("RaceBiasId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RaceBiasId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("RaceBiasName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("RaceBiasId");

                    b.ToTable("LU_RaceBias");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.LuRadarType", b =>
                {
                    b.Property<int>("RadarTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RadarTypeId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("RadarTypeId");

                    b.ToTable("LU_RadarTypes");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.LuRelationshipType", b =>
                {
                    b.Property<int>("RelationshipTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RelationshipTypeId"));

                    b.Property<int>("CounterRelationshipTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("Dating")
                        .HasColumnType("bit");

                    b.Property<string>("RelationshipName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RelationshipTypeId");

                    b.ToTable("LU_RelationshipType");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.LuReligionBias", b =>
                {
                    b.Property<int>("ReligionBiasId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReligionBiasId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ReligionBiasName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ReligionBiasId");

                    b.ToTable("LU_ReligionBias");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.LuRoadCondition", b =>
                {
                    b.Property<int>("RoadConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoadConditionId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("RoadConditionId");

                    b.ToTable("LU_RoadConditions");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.LuRoadSurface", b =>
                {
                    b.Property<int>("RoadSurfaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoadSurfaceId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("RoadSurfaceId");

                    b.ToTable("LU_RoadSurfaces");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.LuSex", b =>
                {
                    b.Property<int>("SexId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SexId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("IncidentImage")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IvBodyBack")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("IV_BodyBack");

                    b.Property<string>("IvBodyFront")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("IV_BodyFront");

                    b.Property<string>("IvHands")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("IV_Hands");

                    b.Property<string>("IvHeadChinUp")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("IV_HeadChinUp");

                    b.Property<string>("IvHeadEyes")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("IV_HeadEyes");

                    b.Property<string>("IvHeadLeft")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("IV_HeadLeft");

                    b.Property<string>("IvHeadMouth")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("IV_HeadMouth");

                    b.Property<string>("IvHeadRight")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("IV_HeadRight");

                    b.Property<string>("IvHeadTop")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("IV_HeadTop");

                    b.Property<string>("Object")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Possessive")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PossessivePronoun")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Reflexive")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SexIcon")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SexName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Subject")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SexId");

                    b.ToTable("LU_Sex");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.LuSexualOrBias", b =>
                {
                    b.Property<int>("SexualOrBiasId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SexualOrBiasId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("SexualOrBiasName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SexualOrBiasId");

                    b.ToTable("LU_SexualOrBias");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.LuSkinComplexion", b =>
                {
                    b.Property<int>("SkinId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SkinId"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Nciccode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("NCICCode");

                    b.HasKey("SkinId");

                    b.ToTable("LU_SkinComplexions");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.LuSpecimenStorage", b =>
                {
                    b.Property<int>("StorageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StorageId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Storage")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("StorageId");

                    b.ToTable("LU_SpecimenStorage");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.LuSpecimenSubmitMethod", b =>
                {
                    b.Property<int>("SubmitMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubmitMethodId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("SubmitMethodId");

                    b.ToTable("LU_SpecimenSubmitMethod");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.LuState", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StateId"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("StateId");

                    b.ToTable("LU_States");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.LuStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("StatusDescription")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("StatusId");

                    b.ToTable("LU_Status");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.LuSurface", b =>
                {
                    b.Property<int>("SurfaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SurfaceId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("SurfaceId");

                    b.ToTable("LU_Surfaces");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.LuTechnicianType", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Employed")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("EmployeeId");

                    b.ToTable("LU_TechnicianType");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.LuUnknownBias", b =>
                {
                    b.Property<int>("UnknownBiasId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UnknownBiasId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("UnknownBiasName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UnknownBiasId");

                    b.ToTable("LU_UnknownBias");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.LuWaterSurface", b =>
                {
                    b.Property<int>("WaterSurfaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WaterSurfaceId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("WaterSurface")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("WaterSurfaceId");

                    b.ToTable("LU_WaterSurfaces");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.LuWaveHeight", b =>
                {
                    b.Property<int>("WaveHeightId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WaveHeightId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("WaveHeight")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("WaveHeightId");

                    b.ToTable("LU_WaveHeights");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.LuWaveType", b =>
                {
                    b.Property<int>("WaveTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WaveTypeId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("WaveType")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("WaveTypeId");

                    b.ToTable("LU_WaveTypes");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.LuWeatherType", b =>
                {
                    b.Property<int>("WeatherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WeatherId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("WeatherId");

                    b.ToTable("LU_WeatherTypes");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.Officer", b =>
                {
                    b.Property<int>("OfficerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OfficerId"));

                    b.Property<string>("BadgeNo")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dreno")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DRENo");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Pid")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("PID");

                    b.Property<string>("Rank")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OfficerId");

                    b.ToTable("Officer");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.OfficerStepShift", b =>
                {
                    b.Property<int>("StepOfficerShiftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StepOfficerShiftId"));

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<int?>("ApprovedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Comments")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("DateOfShift")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("MileageEnd")
                        .HasColumnType("int");

                    b.Property<int>("MileageStart")
                        .HasColumnType("int");

                    b.Property<int>("MileageTotal")
                        .HasColumnType("int");

                    b.Property<int?>("OfficerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ShiftEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ShiftStart")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StepGrantTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("StepShiftId")
                        .HasColumnType("int");

                    b.Property<bool>("Submitted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("SubmittedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalHrsworked")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("TotalHRSWorked");

                    b.HasKey("StepOfficerShiftId");

                    b.HasIndex(new[] { "StepGrantTypeId" }, "IX_OfficerStepShifts_StepGrantTypeId");

                    b.HasIndex(new[] { "StepShiftId" }, "IX_OfficerStepShifts_StepShiftId");

                    b.ToTable("OfficerStepShifts", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.Organization", b =>
                {
                    b.Property<int>("OrganizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrganizationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrganizationId"));

                    b.Property<string>("Acemail")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ACEmail");

                    b.Property<string>("Acname")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ACName");

                    b.Property<string>("Acphone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("ACPhone");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("AgencyOri")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("AgencyORI");

                    b.Property<bool>("EsignActive")
                        .HasColumnType("bit");

                    b.Property<bool>("EsignSecSignJudge")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsTest")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<int?>("OrganizationMainLocationIdFk")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationMainLocationID_FK");

                    b.Property<string>("OrganizationName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Orinumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ORINumber");

                    b.Property<bool>("RejectedEula")
                        .HasColumnType("bit")
                        .HasColumnName("RejectedEULA");

                    b.Property<DateTime?>("RejectedEulaon")
                        .HasColumnType("datetime2")
                        .HasColumnName("RejectedEULAOn");

                    b.Property<bool>("RestrictAccessByIp")
                        .HasColumnType("bit")
                        .HasColumnName("RestrictAccessByIP");

                    b.Property<string>("RoleGroupId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("StepZonesByLoc")
                        .HasColumnType("bit");

                    b.Property<string>("SwgroupIdfk")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("SWGroupIDFK");

                    b.Property<bool>("Training")
                        .HasColumnType("bit");

                    b.Property<bool>("TransferEnabled")
                        .HasColumnType("bit");

                    b.HasKey("OrganizationId");

                    b.HasIndex(new[] { "OrganizationMainLocationIdFk" }, "IX_Organization_OrganizationMainLocationID_FK");

                    b.ToTable("Organization");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.OrganizationEuladoc", b =>
                {
                    b.Property<int>("OrganizationEuladocId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrganizationEULADocId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrganizationEuladocId"));

                    b.Property<DateTime?>("ActiveDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Eulatext")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EULAText");

                    b.Property<bool>("IsLive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrganizationEuladocId");

                    b.ToTable("OrganizationEULADoc");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.OrganizationIprestriction", b =>
                {
                    b.Property<int>("OrganizationIprestrictionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrganizationIPRestrictionId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrganizationIprestrictionId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("Restriction")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RestrictionTypeId")
                        .HasColumnType("int");

                    b.Property<int>("WebsiteOrApi")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("OrganizationIprestrictionId");

                    b.ToTable("OrganizationIPRestriction");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.OrganizationLocation", b =>
                {
                    b.Property<int>("OrganizationLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrganizationLocationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrganizationLocationId"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEsignActive")
                        .HasColumnType("bit");

                    b.Property<int>("OrganizationIdFk")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationID_FK");

                    b.Property<string>("OrganizationLocationAddr1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("OrganizationLocationAddr2")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("OrganizationLocationCity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OrganizationLocationContact")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OrganizationLocationCounty")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OrganizationLocationEmail")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OrganizationLocationFax")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("OrganizationLocationName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("OrganizationLocationPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("OrganizationLocationState")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength();

                    b.Property<string>("OrganizationLocationTransferCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("OrganizationLocationZip")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Orinumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ORINumber");

                    b.HasKey("OrganizationLocationId");

                    b.ToTable("OrganizationLocation");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.OrganizationSearchWarrantGroup", b =>
                {
                    b.Property<int>("OrganizationSearchWarrantGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrganizationSearchWarrantGroupId"));

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("SearchWarrantGroupIdFk")
                        .HasColumnType("int");

                    b.HasKey("OrganizationSearchWarrantGroupId");

                    b.ToTable("OrganizationSearchWarrantGroup");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.OrganizationSignedEula", b =>
                {
                    b.Property<int>("OrganizationSignedEulaid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrganizationSignedEULAId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrganizationSignedEulaid"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Eulaversion")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EULAVersion");

                    b.Property<int>("OrganizationEuladocId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationEULADocId");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Signature")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SignedName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SignedPosition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrganizationSignedEulaid");

                    b.ToTable("OrganizationSignedEULA");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.OrganizationTransferSetting", b =>
                {
                    b.Property<int>("OrganizationTransferSettingsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrganizationTransferSettingsId"));

                    b.Property<bool>("AllowMultipleDataTransfer")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowMultiplePdfTransfer")
                        .HasColumnType("bit");

                    b.Property<string>("Apikey")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("APIKey");

                    b.Property<int>("AuthType")
                        .HasColumnType("int");

                    b.Property<bool>("EnableDataTransfer")
                        .HasColumnType("bit");

                    b.Property<bool>("EnablePdfTransfer")
                        .HasColumnType("bit");

                    b.Property<string>("Folder")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<bool>("LocationTransfer")
                        .HasColumnType("bit");

                    b.Property<int>("OrganizationIdFk")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("TransferType")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("UniqueTransferCode")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Url")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("URL");

                    b.Property<int>("UseCustomPort")
                        .HasColumnType("int");

                    b.Property<bool>("UseCustomTransportProperties")
                        .HasColumnType("bit");

                    b.Property<bool>("UsePasvtransfer")
                        .HasColumnType("bit")
                        .HasColumnName("UsePASVTransfer");

                    b.Property<string>("Username")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("VendorSystem")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("OrganizationTransferSettingsId")
                        .HasName("pk_OrganizationTransferSettingsId");

                    b.ToTable("OrganizationTransferSettings");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.OtherOfficer", b =>
                {
                    b.Property<int>("OtherOfficerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OtherOfficerId"));

                    b.Property<string>("BadgeNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<string>("Department")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OfficerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OtherOfficerParticipation")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool?>("Supplement")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.HasKey("OtherOfficerId");

                    b.HasIndex(new[] { "CaseId" }, "IX_OtherOfficers_CaseId");

                    b.ToTable("OtherOfficers", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.PasswordHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("UserId")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("Id")
                        .HasName("pk_PasswordHistory");

                    b.ToTable("PasswordHistory");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.PhysicalEvidence", b =>
                {
                    b.Property<int>("PhysicalEvidenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhysicalEvidenceId"));

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<bool>("DispatchRecordingInclude")
                        .HasColumnType("bit");

                    b.Property<string>("ExplainDispacthRecording")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("OtherPhysicalEvidence")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("PhysicalEvidenceId");

                    b.HasIndex(new[] { "CaseId" }, "IX_PhysicalEvidences_CaseId");

                    b.ToTable("PhysicalEvidences", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.PriorDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("pk_PriorDepartments");

                    b.ToTable("PriorDepartments");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.ReportForm", b =>
                {
                    b.Property<int>("ReportFormId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportFormId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("FileExtension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReportGroupId")
                        .HasColumnType("int");

                    b.Property<string>("ReportName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RevVersion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SubReport")
                        .HasColumnType("bit");

                    b.HasKey("ReportFormId");

                    b.HasIndex(new[] { "ReportGroupId" }, "IX_ReportForms_ReportGroupId");

                    b.ToTable("ReportForms", "Form");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.ReportGroup", b =>
                {
                    b.Property<int>("ReportGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportGroupId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("GroupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("ReportGroupType")
                        .HasColumnType("int");

                    b.HasKey("ReportGroupId");

                    b.ToTable("ReportGroups", "Form");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("RoleParentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedName" }, "RoleNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedName] IS NOT NULL)");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_RoleClaims_RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.RoleType", b =>
                {
                    b.Property<Guid>("RoleTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsEnforcement")
                        .HasColumnType("bit");

                    b.Property<string>("RoleType1")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RoleType");

                    b.HasKey("RoleTypeId");

                    b.ToTable("RoleType");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.RolesToPermission", b =>
                {
                    b.Property<string>("RoleName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PermissionsInRole")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleName");

                    b.ToTable("RolesToPermissions");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.Schema", b =>
                {
                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Version")
                        .HasName("PK_HangFire_Schema");

                    b.ToTable("Schema", "HangFire");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.SearchWarrantGroup", b =>
                {
                    b.Property<int>("SwgroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SWGroupId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SwgroupId"));

                    b.Property<string>("SwgroupName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SWGroupName");

                    b.HasKey("SwgroupId");

                    b.ToTable("SearchWarrantGroup");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.SecurityQuestion", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuestionId")
                        .HasName("pk_SecurityQuestion");

                    b.ToTable("SecurityQuestion");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.Server", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastHeartbeat")
                        .HasColumnType("datetime");

                    b.HasKey("Id")
                        .HasName("PK_HangFire_Server");

                    b.HasIndex(new[] { "LastHeartbeat" }, "IX_HangFire_Server_LastHeartbeat");

                    b.ToTable("Server", "HangFire");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.Set", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Value")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("ExpireAt")
                        .HasColumnType("datetime");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.HasKey("Key", "Value")
                        .HasName("PK_HangFire_Set");

                    b.HasIndex(new[] { "ExpireAt" }, "IX_HangFire_Set_ExpireAt")
                        .HasFilter("([ExpireAt] IS NOT NULL)");

                    b.HasIndex(new[] { "Key", "Score" }, "IX_HangFire_Set_Score");

                    b.ToTable("Set", "HangFire");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.SigningRequest", b =>
                {
                    b.Property<int>("SigningRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SigningRequestId"));

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("EntityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalRequestId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SigningTemplateId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("SigningRequestId");

                    b.HasIndex(new[] { "SigningTemplateId" }, "IX_SigningRequests_SigningTemplateId");

                    b.HasIndex(new[] { "StatusId" }, "IX_SigningRequests_StatusId");

                    b.ToTable("SigningRequests", "Form");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.SigningRequestReport", b =>
                {
                    b.Property<int>("SigningRequestReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SigningRequestReportId"));

                    b.Property<byte[]>("GeneratedReport")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReportId")
                        .HasColumnType("int");

                    b.Property<int>("SigningRequestId")
                        .HasColumnType("int");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("SigningRequestReportId");

                    b.HasIndex(new[] { "ReportId" }, "IX_SigningRequestReport_ReportId");

                    b.HasIndex(new[] { "SigningRequestId" }, "IX_SigningRequestReport_SigningRequestId");

                    b.HasIndex(new[] { "StatusId" }, "IX_SigningRequestReport_StatusId");

                    b.ToTable("SigningRequestReport", "Form");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.SigningRequestReportAction", b =>
                {
                    b.Property<int>("SigningRequestReportActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SigningRequestReportActionId"));

                    b.Property<int>("SigningActionId")
                        .HasColumnType("int");

                    b.Property<int>("SigningRequestReportId")
                        .HasColumnType("int");

                    b.Property<int?>("SigningRequestSignerId")
                        .HasColumnType("int");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("SigningRequestReportActionId");

                    b.HasIndex(new[] { "SigningActionId" }, "IX_SigningRequestReportActions_SigningActionId");

                    b.HasIndex(new[] { "SigningRequestReportId" }, "IX_SigningRequestReportActions_SigningRequestReportId");

                    b.HasIndex(new[] { "SigningRequestSignerId" }, "IX_SigningRequestReportActions_SigningRequestSignerId");

                    b.HasIndex(new[] { "StatusId" }, "IX_SigningRequestReportActions_StatusId");

                    b.ToTable("SigningRequestReportActions", "Form");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.SigningRequestSigner", b =>
                {
                    b.Property<int>("SigningRequestSignerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SigningRequestSignerId"));

                    b.Property<bool>("IsLocalSigner")
                        .HasColumnType("bit");

                    b.Property<int>("SignOrder")
                        .HasColumnType("int");

                    b.Property<string>("SignerInitial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SignerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SignerTypeId")
                        .HasColumnType("int");

                    b.Property<int>("SigningRequestId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SigningRequestSignerId");

                    b.HasIndex(new[] { "SignerTypeId" }, "IX_SigningRequestSigners_SignerTypeId");

                    b.HasIndex(new[] { "SigningRequestId" }, "IX_SigningRequestSigners_SigningRequestId");

                    b.ToTable("SigningRequestSigners", "Form");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.SigningTemplate", b =>
                {
                    b.Property<int>("SigningTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SigningTemplateId"));

                    b.Property<int>("SearchWarrantGroupId")
                        .HasColumnType("int");

                    b.Property<string>("TemplateName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SigningTemplateId");

                    b.ToTable("SigningTemplates", "Form");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.SigningTemplateReport", b =>
                {
                    b.Property<int>("SigningTemplateReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SigningTemplateReportId"));

                    b.Property<bool>("FormIsRequired")
                        .HasColumnType("bit");

                    b.Property<int>("ReportFormId")
                        .HasColumnType("int");

                    b.Property<int>("SigningTemplateId")
                        .HasColumnType("int");

                    b.HasKey("SigningTemplateReportId");

                    b.HasIndex(new[] { "ReportFormId" }, "IX_SigningTemplateReports_ReportFormId");

                    b.HasIndex(new[] { "SigningTemplateId" }, "IX_SigningTemplateReports_SigningTemplateId");

                    b.ToTable("SigningTemplateReports", "Form");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.SigningTemplateReportAction", b =>
                {
                    b.Property<int>("SigningTemplateReportActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SigningTemplateReportActionId"));

                    b.Property<int>("SignerActionId")
                        .HasColumnType("int");

                    b.Property<int>("SignerTypeId")
                        .HasColumnType("int");

                    b.Property<int>("SigningTemplateReportId")
                        .HasColumnType("int");

                    b.HasKey("SigningTemplateReportActionId");

                    b.HasIndex(new[] { "SignerActionId" }, "IX_SigningTemplateReportActions_SignerActionId");

                    b.HasIndex(new[] { "SignerTypeId" }, "IX_SigningTemplateReportActions_SignerTypeId");

                    b.HasIndex(new[] { "SigningTemplateReportId" }, "IX_SigningTemplateReportActions_SigningTemplateReportId");

                    b.ToTable("SigningTemplateReportActions", "Form");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.SigningTemplateSigner", b =>
                {
                    b.Property<int>("SigningTemplateSignerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SigningTemplateSignerId"));

                    b.Property<int>("SignerTypeId")
                        .HasColumnType("int");

                    b.Property<int>("SigningOrder")
                        .HasColumnType("int");

                    b.Property<int>("SigningTemplateId")
                        .HasColumnType("int");

                    b.HasKey("SigningTemplateSignerId");

                    b.HasIndex(new[] { "SignerTypeId" }, "IX_SigningTemplateSigners_SignerTypeId");

                    b.HasIndex(new[] { "SigningTemplateId" }, "IX_SigningTemplateSigners_SigningTemplateId");

                    b.ToTable("SigningTemplateSigners", "Form");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.SpecimenBloodTest", b =>
                {
                    b.Property<int>("SpecimenBloodTestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpecimenBloodTestId"));

                    b.Property<string>("BloodVials")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("BwiNoAlcohol")
                        .HasColumnType("bit")
                        .HasColumnName("BWI_NoAlcohol");

                    b.Property<bool>("BwiPreservative")
                        .HasColumnType("bit")
                        .HasColumnName("BWI_Preservative");

                    b.Property<bool>("BwiRotated")
                        .HasColumnType("bit")
                        .HasColumnName("BWI_Rotated");

                    b.Property<int?>("EmployedId")
                        .HasColumnType("int");

                    b.Property<string>("EmployerName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LabAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LabCity")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LabName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LabPhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Location")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LocationDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("MoreLessIntoxId")
                        .HasColumnType("int");

                    b.Property<string>("PersonName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PersonPhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("SpecimenDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SpecimenReportId")
                        .HasColumnType("int");

                    b.HasKey("SpecimenBloodTestId");

                    b.HasIndex(new[] { "EmployedId" }, "IX_SpecimenBloodTests_EmployedId");

                    b.HasIndex(new[] { "MoreLessIntoxId" }, "IX_SpecimenBloodTests_MoreLessIntoxId");

                    b.HasIndex(new[] { "SpecimenReportId" }, "IX_SpecimenBloodTests_SpecimenReportId");

                    b.ToTable("SpecimenBloodTests", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.SpecimenBreathTest", b =>
                {
                    b.Property<int>("SpecimenBreathTestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpecimenBreathTestId"));

                    b.Property<bool>("BreathIntoxiOperator")
                        .HasColumnType("bit");

                    b.Property<int?>("MoreLessIntoxId")
                        .HasColumnType("int");

                    b.Property<string>("OperatorAgency")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OperatorName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RecordNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Result1Number")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<DateTime?>("Result1Time")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Result2Number")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<DateTime?>("Result2Time")
                        .HasColumnType("datetime2");

                    b.Property<string>("SerialNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SpecimenReportId")
                        .HasColumnType("int");

                    b.Property<string>("SubjectComments")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("TestGivenDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("VerifyTempId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("WaitingPeriodTime")
                        .HasColumnType("datetime2");

                    b.HasKey("SpecimenBreathTestId");

                    b.HasIndex(new[] { "MoreLessIntoxId" }, "IX_SpecimenBreathTests_MoreLessIntoxId");

                    b.HasIndex(new[] { "SpecimenReportId" }, "IX_SpecimenBreathTests_SpecimenReportId");

                    b.HasIndex(new[] { "VerifyTempId" }, "IX_SpecimenBreathTests_VerifyTempId");

                    b.ToTable("SpecimenBreathTests", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.SpecimenReport", b =>
                {
                    b.Property<int>("SpecimenReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpecimenReportId"));

                    b.Property<bool>("AlchoholDetected")
                        .HasColumnType("bit");

                    b.Property<bool>("Blood")
                        .HasColumnType("bit");

                    b.Property<bool>("BloodProvided")
                        .HasColumnType("bit");

                    b.Property<bool>("BloodRefused")
                        .HasColumnType("bit");

                    b.Property<bool>("BloodSpecimenTaken")
                        .HasColumnType("bit");

                    b.Property<bool>("Breath")
                        .HasColumnType("bit");

                    b.Property<bool>("BreathProvided")
                        .HasColumnType("bit");

                    b.Property<bool>("BreathRefused")
                        .HasColumnType("bit");

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<string>("Dic24ReadBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("DIC_24_ReadBy");

                    b.Property<bool>("Dic24ReadEnglish")
                        .HasColumnType("bit")
                        .HasColumnName("DIC_24_ReadEnglish");

                    b.Property<bool>("Dic24ReadSpanish")
                        .HasColumnType("bit")
                        .HasColumnName("DIC_24_ReadSpanish");

                    b.Property<bool>("Dic24RecordingUsed")
                        .HasColumnType("bit")
                        .HasColumnName("DIC_24_RecordingUsed");

                    b.Property<DateTime?>("Dic24Time")
                        .HasColumnType("datetime2")
                        .HasColumnName("DIC_24_Time");

                    b.Property<bool>("Dlconfiscated")
                        .HasColumnType("bit")
                        .HasColumnName("DLConfiscated");

                    b.Property<string>("DlnotConfiscatedReason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DLNotConfiscatedReason");

                    b.Property<DateTime?>("DlnoticeDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DLNoticeDate");

                    b.Property<string>("HandedDic25")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("Handed_DIC_25");

                    b.Property<string>("LabBacresult")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LabBACResult");

                    b.Property<DateTime?>("MagistrateWarrantTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ProvidedNone")
                        .HasColumnType("bit");

                    b.Property<string>("SearchWarrantCourt")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("SearchWarrantSought")
                        .HasColumnType("bit");

                    b.Property<string>("SearchWarrantfMagistrateName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("TimePresentedToMagistrate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Urine")
                        .HasColumnType("bit");

                    b.Property<bool>("UrineProvided")
                        .HasColumnType("bit");

                    b.Property<bool>("UrinehRefused")
                        .HasColumnType("bit");

                    b.Property<bool>("WarrantIssuedByMagistrate")
                        .HasColumnType("bit");

                    b.HasKey("SpecimenReportId");

                    b.HasIndex(new[] { "CaseId" }, "IX_SpecimenReports_CaseId");

                    b.ToTable("SpecimenReports", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.SpecimenUrineTest", b =>
                {
                    b.Property<int>("SpecimenUrineTestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpecimenUrineTestId"));

                    b.Property<string>("LabAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LabCity")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LabName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LabPhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("MoreLessIntoxId")
                        .HasColumnType("int");

                    b.Property<string>("Results")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpecimenReportId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UrineCollectedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UrineCollectedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("WitnessedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SpecimenUrineTestId");

                    b.HasIndex(new[] { "MoreLessIntoxId" }, "IX_SpecimenUrineTests_MoreLessIntoxId");

                    b.HasIndex(new[] { "SpecimenReportId" }, "IX_SpecimenUrineTests_SpecimenReportId");

                    b.ToTable("SpecimenUrineTests", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.State", b =>
                {
                    b.Property<long>("JobId")
                        .HasColumnType("bigint");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Reason")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("JobId", "Id")
                        .HasName("PK_HangFire_State");

                    b.ToTable("State", "HangFire");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.StepOfficerShiftCase", b =>
                {
                    b.Property<int>("StepOfficerShiftCaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StepOfficerShiftCaseId"));

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<int>("StepOfficerShiftId")
                        .HasColumnType("int");

                    b.HasKey("StepOfficerShiftCaseId");

                    b.HasIndex(new[] { "CaseId" }, "IX_StepOfficerShiftCases_CaseId");

                    b.HasIndex(new[] { "StepOfficerShiftId" }, "IX_StepOfficerShiftCases_StepOfficerShiftId");

                    b.ToTable("StepOfficerShiftCases", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.StepOfficerShiftZone", b =>
                {
                    b.Property<int>("StepOfficerShiftZoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StepOfficerShiftZoneId"));

                    b.Property<int>("OfficerStepShiftId")
                        .HasColumnType("int");

                    b.Property<int>("StepZoneId")
                        .HasColumnType("int");

                    b.HasKey("StepOfficerShiftZoneId");

                    b.HasIndex(new[] { "OfficerStepShiftId" }, "IX_StepOfficerShiftZones_OfficerStepShiftId");

                    b.HasIndex(new[] { "StepZoneId" }, "IX_StepOfficerShiftZones_StepZoneId");

                    b.ToTable("StepOfficerShiftZones", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.StepShift", b =>
                {
                    b.Property<int>("StepShiftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StepShiftId"));

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ShiftEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ShiftStart")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StepGrantTypeId")
                        .HasColumnType("int");

                    b.HasKey("StepShiftId");

                    b.HasIndex(new[] { "StepGrantTypeId" }, "IX_StepShifts_StepGrantTypeId");

                    b.ToTable("StepShifts", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.StepZone", b =>
                {
                    b.Property<int>("StepZoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StepZoneId"));

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<int?>("StepGrantTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ZoneDesc")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("ZoneNumber")
                        .HasColumnType("int");

                    b.HasKey("StepZoneId");

                    b.HasIndex(new[] { "StepGrantTypeId" }, "IX_StepZones_StepGrantTypeId");

                    b.ToTable("StepZones", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.SystemModeControl", b =>
                {
                    b.Property<int>("SystemModeControlId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SystemModeControlId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ControlName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ModeId")
                        .HasColumnType("int");

                    b.Property<int?>("PageId")
                        .HasColumnType("int");

                    b.Property<bool>("Required")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Visible")
                        .HasColumnType("bit");

                    b.HasKey("SystemModeControlId");

                    b.HasIndex(new[] { "ModeId" }, "IX_SystemModeControls_ModeId");

                    b.HasIndex(new[] { "PageId" }, "IX_SystemModeControls_PageId");

                    b.ToTable("SystemModeControls", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.SystemPage", b =>
                {
                    b.Property<int>("SystemPageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SystemPageId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("PageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("SystemPageId");

                    b.ToTable("SystemPages", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOfficerResume", b =>
                {
                    b.Property<int>("OfficerResumeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OfficerResumeId"));

                    b.Property<int>("AgreementRoleId")
                        .HasColumnType("int")
                        .HasColumnName("AGREEMENT_ROLE_ID");

                    b.Property<bool>("Aride")
                        .HasColumnType("bit")
                        .HasColumnName("ARIDE");

                    b.Property<bool>("ArideInstructor")
                        .HasColumnType("bit")
                        .HasColumnName("ARIDE_INSTRUCTOR");

                    b.Property<bool>("Bto")
                        .HasColumnType("bit")
                        .HasColumnName("BTO");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_DATE");

                    b.Property<bool>("Dre")
                        .HasColumnType("bit")
                        .HasColumnName("DRE");

                    b.Property<bool>("DreInstructor")
                        .HasColumnType("bit")
                        .HasColumnName("DRE_INSTRUCTOR");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("MODIFIED_BY");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("MODIFIED_DATE");

                    b.Property<bool>("Mseo")
                        .HasColumnType("bit")
                        .HasColumnName("MSEO");

                    b.Property<string>("Resume")
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)")
                        .HasColumnName("RESUME");

                    b.Property<bool>("SeatedSfst")
                        .HasColumnType("bit")
                        .HasColumnName("SEATED_SFST");

                    b.Property<bool>("Sfst")
                        .HasColumnType("bit")
                        .HasColumnName("SFST");

                    b.Property<bool>("Sfst35")
                        .HasColumnType("bit")
                        .HasColumnName("SFST_35");

                    b.Property<bool>("SfstInstructor")
                        .HasColumnType("bit")
                        .HasColumnName("SFST_INSTRUCTOR");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OfficerResumeId")
                        .HasName("OFFICER_RESUME_ID");

                    b.ToTable("TBL_OFFICER_RESUME");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptAccident", b =>
                {
                    b.Property<int>("AccidentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccidentId"));

                    b.Property<string>("AccidentDescription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.HasKey("AccidentId");

                    b.ToTable("TBL_OPT_Accidents", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptActivityType", b =>
                {
                    b.Property<int>("ActivityTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActivityTypeId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ActivityTypeDesc")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("FullCase")
                        .HasColumnType("bit");

                    b.HasKey("ActivityTypeId");

                    b.ToTable("TBL_OPT_ActivityTypes", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptAddressGroup", b =>
                {
                    b.Property<int>("AddressGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressGroupId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("AddressGroupName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Icon")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("AddressGroupId");

                    b.ToTable("TBL_OPT_AddressGroup", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptAlcoholType", b =>
                {
                    b.Property<int>("AlcoholTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AlcoholTypeId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Alcohol")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AlcoholTypeId");

                    b.ToTable("TBL_OPT_AlcoholTypes", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptBodyWater", b =>
                {
                    b.Property<int>("BodyOfWaterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BodyOfWaterId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("BodyOfWaterDesc")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("BodyOfWaterId");

                    b.ToTable("TBL_OPT_BodyWaters", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptBwiMotor", b =>
                {
                    b.Property<int>("BwiMotorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BwiMotorId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("BwiMotorDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BwiMotorId");

                    b.ToTable("TBL_OPT_BWI_Motors", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptBwiVessel", b =>
                {
                    b.Property<int>("BwiVesselId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BwiVesselId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("BwiVesselDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BwiVesselId");

                    b.ToTable("TBL_OPT_BWI_Vessels", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptCaseOutcomeDismissal", b =>
                {
                    b.Property<int>("CaseOutcomeDismissalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CaseOutcomeDismissalId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("DismissalText")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CaseOutcomeDismissalId");

                    b.ToTable("TBL_OPT_Case_Outcome_Dismissals", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptCaseOutcomePlea", b =>
                {
                    b.Property<int>("CaseOutcomePleaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CaseOutcomePleaId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("PleaText")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CaseOutcomePleaId");

                    b.ToTable("TBL_OPT_Case_Outcome_Pleas", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptCaseOutcomeTrial", b =>
                {
                    b.Property<int>("CaseOutcomeTrialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CaseOutcomeTrialId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("TrialText")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CaseOutcomeTrialId");

                    b.ToTable("TBL_OPT_Case_Outcome_Trials", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptCounty", b =>
                {
                    b.Property<int>("CountyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountyId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("CountyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CountyId");

                    b.ToTable("TBL_OPT_Counties", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptDismissal", b =>
                {
                    b.Property<int>("DismissalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DismissalId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("DismissalDescription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DismissalId");

                    b.ToTable("TBL_OPT_Dismissals", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptDocumentFileType", b =>
                {
                    b.Property<int>("FileTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FileTypeId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Extension")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FileName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Icon")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("Image")
                        .HasColumnType("bit");

                    b.Property<string>("MimeType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("FileTypeId");

                    b.ToTable("TBL_OPT_DocumentFileTypes", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptDocumentType", b =>
                {
                    b.Property<int>("DocumentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentTypeId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("DocumentTypeId");

                    b.ToTable("TBL_OPT_DocumentTypes", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptDpsDrug", b =>
                {
                    b.Property<int>("DpsDrugListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DpsDrugListId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("DpsDrug")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DpsDrugCategory")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DpsDrugListId");

                    b.ToTable("TBL_OPT_DPS_Drugs", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptDreFirstIndicator1", b =>
                {
                    b.Property<int>("DreFirstIndicatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DreFirstIndicatorId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Cann")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CnsDep")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CnsSti")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DissAne")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Hall")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IndType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IndTypeFullName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Inha")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NarAna")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("DreFirstIndicatorId");

                    b.ToTable("TBL_OPT_DRE_FirstIndicators", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptDreMajorIndicator1", b =>
                {
                    b.Property<int>("DreMajorIndicatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DreMajorIndicatorId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ColumnName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("IndTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ValueToDisplay")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("DreMajorIndicatorId");

                    b.ToTable("TBL_OPT_DRE_Major_Indicators", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptDreMajorType", b =>
                {
                    b.Property<int>("DreMajorIndicatorsTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DreMajorIndicatorsTypeId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("IndType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IndTypeFullName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("DreMajorIndicatorsTypeId");

                    b.ToTable("TBL_OPT_DRE_Major_Types", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptDreNotified1", b =>
                {
                    b.Property<int>("DreNotifiedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DreNotifiedId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("DreNotifiedDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DreNotifiedId");

                    b.ToTable("TBL_OPT_DRE_Notified", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptDreReactionToLight1", b =>
                {
                    b.Property<int>("DreReactionToLightId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DreReactionToLightId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("DreReactionToLightDesc")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("DreReactionToLightId");

                    b.ToTable("TBL_OPT_DRE_Reaction_To_Lights", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptDreRequested1", b =>
                {
                    b.Property<int>("DreRequestedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DreRequestedId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("DreRequestedDesc")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("DreRequestedId");

                    b.ToTable("TBL_OPT_DRE_Requested", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptDreRole1", b =>
                {
                    b.Property<int>("DreRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DreRoleId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("DreRoleDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DreRoleId");

                    b.ToTable("TBL_OPT_DRE_Roles", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptDreType1", b =>
                {
                    b.Property<int>("DreTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DreTypeId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("DreTypeDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DreTypeId");

                    b.ToTable("TBL_OPT_DRE_Types", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptEducation", b =>
                {
                    b.Property<int>("EducationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EducationId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("EducationDescription")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("EducationId");

                    b.ToTable("TBL_OPT_Educations", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptEmployedPwd", b =>
                {
                    b.Property<int>("EmployedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployedId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Employed")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("EmployedId");

                    b.ToTable("TBL_OPT_Employed_PWD", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptEthnicity", b =>
                {
                    b.Property<int>("EthnicityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EthnicityId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("EthnicityDescription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("EthnicityId");

                    b.ToTable("TBL_OPT_Ethnicity", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptEyeColor", b =>
                {
                    b.Property<int>("EyeColorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EyeColorId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("EyeColorDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NcicCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("EyeColorId");

                    b.ToTable("TBL_OPT_Eye_Colors", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptFootWearType", b =>
                {
                    b.Property<int>("FootwearTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FootwearTypeId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("FootwearDescription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("FootwearTypeId");

                    b.ToTable("TBL_OPT_Foot_Wear_Types", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptGender", b =>
                {
                    b.Property<int>("GenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenderId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("GenderAbbreviation")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("GenderDescription")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("NcicCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("GenderId");

                    b.ToTable("TBL_OPT_Genders", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptHairColor", b =>
                {
                    b.Property<int>("HairColorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HairColorId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("HairColorDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NcicCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("HairColorId");

                    b.ToTable("TBL_OPT_Hair_Colors", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptHgnEstimaedAngle", b =>
                {
                    b.Property<int>("HgnEstimatedAngleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HgnEstimatedAngleId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("EstimatedAngleDesc")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShortName")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("HgnEstimatedAngleId");

                    b.ToTable("TBL_OPT_HGN_Estimaed_Angle", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptInjury", b =>
                {
                    b.Property<int>("InjuryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InjuryId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("InjuryDescription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("InjuryId");

                    b.ToTable("TBL_OPT_Injury", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptInterviewQuestion", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Question")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int?>("QuestionOrder")
                        .HasColumnType("int");

                    b.HasKey("QuestionId");

                    b.ToTable("TBL_OPT_Interview_Questions", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptIntoxVerifyTemp", b =>
                {
                    b.Property<int>("IntoxVerifytempId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IntoxVerifytempId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Verifytemp")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IntoxVerifytempId");

                    b.ToTable("TBL_OPT_INTOX_VerifyTemp", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptLightCondition", b =>
                {
                    b.Property<int>("LightConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LightConditionId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("LightConditionDescription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("LightConditionId");

                    b.ToTable("TBL_OPT_Light_Conditions", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptMark43Lookup", b =>
                {
                    b.Property<int>("Mark43LookupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Mark43LookupId"));

                    b.Property<bool>("In")
                        .HasColumnType("bit");

                    b.Property<int?>("LeadrsId")
                        .HasColumnType("int");

                    b.Property<string>("Mark43AttributeType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Mark43Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Mark43Desc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<bool>("Out")
                        .HasColumnType("bit");

                    b.HasKey("Mark43LookupId");

                    b.ToTable("TBL_OPT_Mark43_Lookup", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptMoreLessIntoxicated", b =>
                {
                    b.Property<int>("MoreLessIntoxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MoreLessIntoxId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("MoreLessIntoxDescription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("MoreLessIntoxId");

                    b.ToTable("TBL_OPT_More_Less_Intoxicated", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptNcicColor", b =>
                {
                    b.Property<int>("NcicColorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NcicColorId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("NcicCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("NcicColorId");

                    b.ToTable("TBL_OPT_NCIC_Colors", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptNcicInstruction", b =>
                {
                    b.Property<int>("NcicInstructionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NcicInstructionId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Instruction")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("TransportModeId")
                        .HasColumnType("int");

                    b.HasKey("NcicInstructionId");

                    b.ToTable("TBL_OPT_NCIC_Instructions", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptNcicLabel", b =>
                {
                    b.Property<int>("NcicLabelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NcicLabelId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NcicCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("TableName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TransportModeId")
                        .HasColumnType("int");

                    b.HasKey("NcicLabelId");

                    b.ToTable("TBL_OPT_NCIC_Labels", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptNcicTransportMake", b =>
                {
                    b.Property<int>("NcicTransportMakeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NcicTransportMakeId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Comments")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NcicCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("TransportTypeId")
                        .HasColumnType("int");

                    b.HasKey("NcicTransportMakeId");

                    b.ToTable("TBL_OPT_NCIC_Transport_Make", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptNcicTransportMode", b =>
                {
                    b.Property<int>("NcicTransportModeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NcicTransportModeId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Comments")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("ModeId")
                        .HasColumnType("int");

                    b.HasKey("NcicTransportModeId");

                    b.ToTable("TBL_OPT_NCIC_Transport_Mode", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptNcicTransportType", b =>
                {
                    b.Property<int>("NcicTransportTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NcicTransportTypeId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TransportModeId")
                        .HasColumnType("int");

                    b.HasKey("NcicTransportTypeId");

                    b.ToTable("TBL_OPT_NCIC_Transport_Type", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptNcicVehcileStyleType", b =>
                {
                    b.Property<int>("VehicleStyleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleStyleId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Comments")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NcicCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("TransportTypeId")
                        .HasColumnType("int");

                    b.HasKey("VehicleStyleId");

                    b.ToTable("TBL_OPT_NCIC_Vehcile_Style_Types", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptNcicVehicleBodyStyle", b =>
                {
                    b.Property<int>("BodyStyleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BodyStyleId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NcicCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("TransportTypeId")
                        .HasColumnType("int");

                    b.HasKey("BodyStyleId");

                    b.ToTable("TBL_OPT_NCIC_Vehicle_Body_Style", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptNcicVehicleModel", b =>
                {
                    b.Property<int>("NcicVehicleModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NcicVehicleModelId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("MakeId")
                        .HasColumnType("int");

                    b.Property<string>("NcicCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("OrigDescription")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("NcicVehicleModelId");

                    b.ToTable("TBL_OPT_NCIC_Vehicle_Model", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptOffense", b =>
                {
                    b.Property<int>("OffenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OffenseId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Mark43OffDesc")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool?>("OffenseAssult")
                        .HasColumnType("bit");

                    b.Property<bool?>("OffenseBwi")
                        .HasColumnType("bit");

                    b.Property<string>("OffenseCitation")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("OffenseClassification")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OffenseCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("OffenseComplaintId")
                        .HasColumnType("int");

                    b.Property<string>("OffenseDescription")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("OffenseFelony")
                        .HasColumnType("bit");

                    b.Property<bool>("OffenseIntoxilizer")
                        .HasColumnType("bit");

                    b.Property<bool?>("OffenseManslaughter")
                        .HasColumnType("bit");

                    b.Property<bool?>("OffenseMinor")
                        .HasColumnType("bit");

                    b.Property<bool>("OffenseMinors")
                        .HasColumnType("bit");

                    b.Property<bool>("OffenseOpenContainer")
                        .HasColumnType("bit");

                    b.Property<int?>("OffenseOrder")
                        .HasColumnType("int");

                    b.Property<bool>("OffensePriors")
                        .HasColumnType("bit");

                    b.Property<string>("OffenseSubtitle")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OffenseTitle")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short>("OffenseType")
                        .HasColumnType("smallint");

                    b.HasKey("OffenseId");

                    b.ToTable("TBL_OPT_Offenses", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptOffenseType", b =>
                {
                    b.Property<int>("OffenseTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OffenseTypeId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("OffenseTypeDesc")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("OffenseTypeId");

                    b.ToTable("TBL_OPT_Offense_Types", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptOperationOccupation", b =>
                {
                    b.Property<int>("OperatorOccupationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OperatorOccupationId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Occupation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("OperatorOccupationId");

                    b.ToTable("TBL_OPT_Operation_Occupations", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptOutcome", b =>
                {
                    b.Property<int>("OutcomeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OutcomeId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("OutcomeDescription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("OutcomeId");

                    b.ToTable("TBL_OPT_Outcomes", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptPhoneType", b =>
                {
                    b.Property<int>("PhoneTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhoneTypeId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Icon")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PhoneTypeName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("PhoneTypeId");

                    b.ToTable("TBL_OPT_PhoneType", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptPlea", b =>
                {
                    b.Property<int>("PleaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PleaId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("PleaDescription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PleaId");

                    b.ToTable("TBL_OPT_Plea", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptRace", b =>
                {
                    b.Property<int>("RaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RaceId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("NcicCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("RaceDescription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RaceId");

                    b.ToTable("TBL_OPT_Races", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptRadarType", b =>
                {
                    b.Property<int>("RadarTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RadarTypeId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("RadarDescription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RadarTypeId");

                    b.ToTable("TBL_OPT_Radar_Types", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptReasonForStop", b =>
                {
                    b.Property<int>("ReasonForStopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReasonForStopId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("AssocControl")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Bwi")
                        .HasColumnType("bit");

                    b.Property<bool?>("Dwi")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsCrash")
                        .HasColumnType("bit");

                    b.Property<string>("ReasonForStopDescription")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("ReasonForStopTxt")
                        .HasColumnType("bit");

                    b.HasKey("ReasonForStopId");

                    b.ToTable("TBL_OPT_Reason_For_Stop", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptRoadCondition", b =>
                {
                    b.Property<int>("RoadConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoadConditionId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("RoadConditionDescription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoadConditionId");

                    b.ToTable("TBL_OPT_Road_Conditions", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptRoadSurface", b =>
                {
                    b.Property<int>("RoadSurfaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoadSurfaceId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("RoadSurfaceDescription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoadSurfaceId");

                    b.ToTable("TBL_OPT_Road_Surface", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptSignerType", b =>
                {
                    b.Property<int>("SignerTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SignerTypeId"));

                    b.Property<bool>("CanCancelProcess")
                        .HasColumnType("bit");

                    b.Property<bool>("CanRemote")
                        .HasColumnType("bit");

                    b.Property<string>("SignerSymbolEnd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SignerSymbolStart")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SignerTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SignerTypeId");

                    b.ToTable("TBL_OPT_SignerTypes", "Form");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptSigningAction", b =>
                {
                    b.Property<int>("SigningActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SigningActionId"));

                    b.Property<string>("ActionDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RequiredReview")
                        .HasColumnType("bit");

                    b.Property<bool>("RequiredSigning")
                        .HasColumnType("bit");

                    b.HasKey("SigningActionId");

                    b.ToTable("TBL_OPT_SigningActions", "Form");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptSigningStatus", b =>
                {
                    b.Property<int>("SigningStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SigningStatusId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SigningStatusId");

                    b.ToTable("TBL_OPT_SigningStatus", "Form");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptSkinComplexion", b =>
                {
                    b.Property<int>("SkinId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SkinId"));

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("NcicCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("SkinDescription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SkinId");

                    b.ToTable("TBL_OPT_Skin_Complexion", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptSpecimenStorage", b =>
                {
                    b.Property<int>("SpecimenStorageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpecimenStorageId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Storage")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SpecimenStorageId");

                    b.ToTable("TBL_OPT_Specimen_Storage", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptSpecimenSubmittedMethod", b =>
                {
                    b.Property<int>("SpecimenSubmittedMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpecimenSubmittedMethodId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Method")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SpecimenSubmittedMethodId");

                    b.ToTable("TBL_OPT_SpecimenSubmittedMethod", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptState", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StateId"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("StateName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("StateId");

                    b.ToTable("TBL_OPT_States", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("StatusDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatusId");

                    b.ToTable("TBL_OPT_Status", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptStepDarEventType", b =>
                {
                    b.Property<int>("StepDarEventTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StepDarEventTypeId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("StepDarEventTypeDesc")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("StepDarEventTypeId");

                    b.ToTable("TBL_OPT_Step_Dar_Event_Types", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptStepGrantType", b =>
                {
                    b.Property<int>("StepGrantTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StepGrantTypeId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("StepGrantTypeDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("StepGrantTypeId");

                    b.ToTable("TBL_OPT_Step_Grant_Type", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptSurface", b =>
                {
                    b.Property<int>("SurfaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SurfaceId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("SurfaceDescription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SurfaceId");

                    b.ToTable("TBL_OPT_Surfaces", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptSystemMode", b =>
                {
                    b.Property<int>("ModeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ModeId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ModeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ModeOrder")
                        .HasColumnType("int");

                    b.Property<int?>("NcicTransportModeId")
                        .HasColumnType("int");

                    b.Property<int?>("OffenseTypeId")
                        .HasColumnType("int");

                    b.HasKey("ModeId");

                    b.HasIndex(new[] { "NcicTransportModeId" }, "IX_TBL_OPT_System_Mode_NcicTransportModeId");

                    b.HasIndex(new[] { "OffenseTypeId" }, "IX_TBL_OPT_System_Mode_OffenseTypeId");

                    b.ToTable("TBL_OPT_System_Mode", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptToxScreenResult", b =>
                {
                    b.Property<int>("ToxScreenResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ToxScreenResultId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<bool?>("DisplayTextbox")
                        .HasColumnType("bit");

                    b.Property<string>("Result")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ToxScreenResultId");

                    b.ToTable("TBL_OPT_Tox_screen_Result", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptToxSpecType1", b =>
                {
                    b.Property<int>("ToxSpecTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ToxSpecTypeId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ToxSpecTypeDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ToxSpecTypeId");

                    b.ToTable("TBL_OPT_Tox_Spec_Types", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptUserSecurityQuestion", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Question")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("QuestionId");

                    b.ToTable("TBL_OPT_User_Security_Questions", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptViolation", b =>
                {
                    b.Property<int>("ViolationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ViolationId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsArrest")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsOther")
                        .HasColumnType("bit");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("ViolationDeswc")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ViolationId");

                    b.ToTable("TBL_OPT_Violations", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptWaterSurface", b =>
                {
                    b.Property<int>("WaterSurfaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WaterSurfaceId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("WaterSurfaceDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("WaterSurfaceId");

                    b.ToTable("TBL_OPT_Water_Surfaces", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptWaveHeight", b =>
                {
                    b.Property<int>("WaveHeightId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WaveHeightId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("WaveHeightDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("WaveHeightId");

                    b.ToTable("TBL_OPT_Wave_Height", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptWaveType", b =>
                {
                    b.Property<int>("WaveTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WaveTypeId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("WaveTypeDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("WaveTypeId");

                    b.ToTable("TBL_OPT_Wave_Types", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptWeather", b =>
                {
                    b.Property<int>("WeatherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WeatherId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("WeatherDescription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("WeatherId");

                    b.ToTable("TBL_OPT_Weathers", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptWindSpeed", b =>
                {
                    b.Property<int>("WindSpeedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WindSpeedId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("WindSpeedDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("WindSpeedId");

                    b.ToTable("TBL_OPT_Wind_Speed", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptZone", b =>
                {
                    b.Property<int>("ZoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ZoneId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ZoneDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ZoneId");

                    b.ToTable("TBL_OPT_Zones", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TransferType", b =>
                {
                    b.Property<int>("TransferTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransferTypeId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("TransferTypeName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("TransferTypeId");

                    b.ToTable("TransferType");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LastLoginDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastPasswordChangedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleNameInitial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int?>("OrganizationLocationId")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("PasswordResetFlag")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool?>("QuestionFlag")
                        .HasColumnType("bit");

                    b.Property<bool?>("RejectedEula")
                        .HasColumnType("bit")
                        .HasColumnName("RejectedEULA");

                    b.Property<DateTime?>("RejectedEulaon")
                        .HasColumnType("datetime2")
                        .HasColumnName("RejectedEULAOn");

                    b.Property<string>("SecurityAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityQuestion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UnconfirmedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedEmail" }, "EmailIndex");

                    b.HasIndex(new[] { "OrganizationId" }, "IX_Users_OrganizationId");

                    b.HasIndex(new[] { "NormalizedUserName" }, "UserNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_UserClaims_UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.UserEuladoc", b =>
                {
                    b.Property<int>("UserEuladocId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserEULADocId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserEuladocId"));

                    b.Property<DateTime?>("ActiveDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Eulatext")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EULAText");

                    b.Property<bool>("IsLive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserEuladocId");

                    b.ToTable("UserEULADoc");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex(new[] { "UserId" }, "IX_UserLogins_UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.UserSetting", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("User_Id");

                    b.Property<bool?>("EmailNotification")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(1)))");

                    b.Property<string>("FooterOption")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Footer_Option");

                    b.Property<string>("HeaderBrandColor")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Header_Brand_Color");

                    b.Property<string>("HeaderColor")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Header_Color");

                    b.Property<string>("HeaderOption")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Header_Option");

                    b.Property<bool?>("Notification")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(1)))");

                    b.Property<string>("SidebarColor")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Sidebar_Color");

                    b.Property<string>("SidebarMenuOption")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Sidebar_Menu_Option");

                    b.Property<string>("SidebarPosition")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Sidebar_Position");

                    b.HasKey("UserId")
                        .HasName("pk_UserSettings");

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.UserSignedEula", b =>
                {
                    b.Property<int>("UserSignedEulaid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserSignedEULAId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserSignedEulaid"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Eulaversion")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EULAVersion");

                    b.Property<int>("UserEuladocId")
                        .HasColumnType("int")
                        .HasColumnName("UserEULADocId");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserSignedEulaid");

                    b.ToTable("UserSignedEULA");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.UserToRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("RoleName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UserId", "RoleName");

                    b.HasIndex(new[] { "RoleName" }, "IX_UserToRoles_RoleName");

                    b.ToTable("UserToRoles");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.UserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.VehicleWatercraft", b =>
                {
                    b.Property<int>("VehicleWatercraftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleWatercraftId"));

                    b.Property<string>("BoatCondition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hin")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("HIN");

                    b.Property<bool>("Less50Hp")
                        .HasColumnType("bit")
                        .HasColumnName("Less50HP");

                    b.Property<int?>("MotorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RegExpDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.Property<string>("VesselComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VesselId")
                        .HasColumnType("int");

                    b.HasKey("VehicleWatercraftId");

                    b.HasIndex(new[] { "MotorId" }, "IX_Vehicle_Watercraft_MotorId");

                    b.HasIndex(new[] { "VehicleId" }, "IX_Vehicle_Watercraft_VehicleId")
                        .IsUnique();

                    b.HasIndex(new[] { "VesselId" }, "IX_Vehicle_Watercraft_VesselId");

                    b.ToTable("Vehicle_Watercraft", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.VehicleWatercraftOwner", b =>
                {
                    b.Property<int>("VehicleWatercraftOwnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleWatercraftOwnerId"));

                    b.Property<string>("Address1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Address2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("AddressGroupId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("CountyId")
                        .HasColumnType("int");

                    b.Property<double>("Lat")
                        .HasColumnType("float");

                    b.Property<double>("Lng")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("VehicleWatercraftOwnerId");

                    b.HasIndex(new[] { "AddressGroupId" }, "IX_Vehicle_Watercraft_Owner_AddressGroupId");

                    b.HasIndex(new[] { "CountyId" }, "IX_Vehicle_Watercraft_Owner_CountyId");

                    b.HasIndex(new[] { "StateId" }, "IX_Vehicle_Watercraft_Owner_StateId");

                    b.HasIndex(new[] { "VehicleId" }, "IX_Vehicle_Watercraft_Owner_VehicleId")
                        .IsUnique();

                    b.ToTable("Vehicle_Watercraft_Owner", "DUI");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.VendorSystem", b =>
                {
                    b.Property<int>("VendorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VendorId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("VendorName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("VendorSystemName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("VendorId")
                        .HasName("pk_VendorId");

                    b.ToTable("VendorSystem");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.Witness", b =>
                {
                    b.Property<int>("WitnessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WitnessId"));

                    b.Property<string>("Address1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Address2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("AddressGroupId")
                        .HasColumnType("int");

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<string>("CellPhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("CountyId")
                        .HasColumnType("int");

                    b.Property<string>("DlNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("DlStateId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("datetime2")
                        .HasColumnName("DOB");

                    b.Property<string>("ExplainNoStatementReason")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("GenderId")
                        .HasColumnType("int");

                    b.Property<bool>("IsVictim")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("Lat")
                        .HasColumnType("float");

                    b.Property<double>("Lng")
                        .HasColumnType("float");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("RaceId")
                        .HasColumnType("int");

                    b.Property<string>("SocialSecurityNumber")
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("WhatWitnessObserved")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("WorkPhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("WrittenStatementProvided")
                        .HasColumnType("bit");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("WitnessId");

                    b.HasIndex(new[] { "AddressGroupId" }, "IX_Witnesses_AddressGroupId");

                    b.HasIndex(new[] { "CaseId" }, "IX_Witnesses_CaseId");

                    b.HasIndex(new[] { "CountyId" }, "IX_Witnesses_CountyId");

                    b.HasIndex(new[] { "DlStateId" }, "IX_Witnesses_DlStateId");

                    b.HasIndex(new[] { "GenderId" }, "IX_Witnesses_GenderId");

                    b.HasIndex(new[] { "RaceId" }, "IX_Witnesses_RaceId");

                    b.HasIndex(new[] { "StateId" }, "IX_Witnesses_StateId");

                    b.ToTable("Witnesses", "DUI");
                });

            modelBuilder.Entity("LuCourtTypeOrganization", b =>
                {
                    b.Property<int>("CourtTypeId")
                        .HasColumnType("int");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.HasKey("CourtTypeId", "OrganizationId");

                    b.ToTable("LuCourtTypeOrganization");
                });

            modelBuilder.Entity("OrganizationCourtType", b =>
                {
                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("CourtTypeId")
                        .HasColumnType("int");

                    b.HasKey("OrganizationId", "CourtTypeId");

                    b.HasIndex(new[] { "CourtTypeId" }, "IX_OrganizationCourtTypes_CourtTypeId");

                    b.ToTable("OrganizationCourtTypes", (string)null);
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.AdditionalOffense", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.CaseOffense", "CaseOffense")
                        .WithMany("AdditionalOffenses")
                        .HasForeignKey("CaseOffenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CaseOffense");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.CaseHeader", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptSystemMode", "Mode")
                        .WithMany("CaseHeaders")
                        .HasForeignKey("ModeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptStatus", "Status")
                        .WithMany("CaseHeaders")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mode");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.CaseOffense", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptAddressGroup", "ArrestAddressGroup")
                        .WithMany("CaseOffenseArrestAddressGroups")
                        .HasForeignKey("ArrestAddressGroupId");

                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptCounty", "ArrestCounty")
                        .WithMany("CaseOffenseArrestCounties")
                        .HasForeignKey("ArrestCountyId");

                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptState", "ArrestState")
                        .WithMany("CaseOffenseArrestStates")
                        .HasForeignKey("ArrestStateId");

                    b.HasOne("LEADRS_NEW_DBFirst.Models.CaseHeader", "Case")
                        .WithMany("CaseOffenses")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptAddressGroup", "OffAddressGroup")
                        .WithMany("CaseOffenseOffAddressGroups")
                        .HasForeignKey("OffAddressGroupId");

                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptCounty", "OffCounty")
                        .WithMany("CaseOffenseOffCounties")
                        .HasForeignKey("OffCountyId");

                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptState", "OffState")
                        .WithMany("CaseOffenseOffStates")
                        .HasForeignKey("OffStateId");

                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptOffense", "Offense")
                        .WithMany("CaseOffenses")
                        .HasForeignKey("OffenseId");

                    b.Navigation("ArrestAddressGroup");

                    b.Navigation("ArrestCounty");

                    b.Navigation("ArrestState");

                    b.Navigation("Case");

                    b.Navigation("OffAddressGroup");

                    b.Navigation("OffCounty");

                    b.Navigation("OffState");

                    b.Navigation("Offense");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.CaseOutcome", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.Organization", "Organization")
                        .WithMany("CaseOutcomes")
                        .HasForeignKey("OrganizationId");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.CaseVehicle", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptNcicVehicleBodyStyle", "BoatHullShape")
                        .WithMany("CaseVehicles")
                        .HasForeignKey("BoatHullShapeId");

                    b.HasOne("LEADRS_NEW_DBFirst.Models.CaseHeader", "Case")
                        .WithMany("CaseVehicles")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptState", "State")
                        .WithMany("CaseVehicles")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptNcicColor", "VehicleColor")
                        .WithMany("CaseVehicles")
                        .HasForeignKey("VehicleColorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptNcicTransportMake", "VehicleMake")
                        .WithMany("CaseVehicles")
                        .HasForeignKey("VehicleMakeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptNcicVehicleModel", "VehicleModel")
                        .WithMany("CaseVehicles")
                        .HasForeignKey("VehicleModelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptNcicVehcileStyleType", "VehicleStyle")
                        .WithMany("CaseVehicles")
                        .HasForeignKey("VehicleStyleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptNcicTransportType", "VehicleType")
                        .WithMany("CaseVehicles")
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("BoatHullShape");

                    b.Navigation("Case");

                    b.Navigation("State");

                    b.Navigation("VehicleColor");

                    b.Navigation("VehicleMake");

                    b.Navigation("VehicleModel");

                    b.Navigation("VehicleStyle");

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.CaseVehiclePassenger", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptAddressGroup", "AddressGroup")
                        .WithMany("CaseVehiclePassengers")
                        .HasForeignKey("AddressGroupId");

                    b.HasOne("LEADRS_NEW_DBFirst.Models.CaseVehicle", "CaseVehicle")
                        .WithMany("CaseVehiclePassengers")
                        .HasForeignKey("CaseVehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptCounty", "County")
                        .WithMany("CaseVehiclePassengers")
                        .HasForeignKey("CountyId");

                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptGender", "Gender")
                        .WithMany("CaseVehiclePassengers")
                        .HasForeignKey("GenderId");

                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptRace", "Race")
                        .WithMany("CaseVehiclePassengers")
                        .HasForeignKey("RaceId");

                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptState", "State")
                        .WithMany("CaseVehiclePassengers")
                        .HasForeignKey("StateId");

                    b.Navigation("AddressGroup");

                    b.Navigation("CaseVehicle");

                    b.Navigation("County");

                    b.Navigation("Gender");

                    b.Navigation("Race");

                    b.Navigation("State");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.CaseViolation", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.CaseHeader", "Case")
                        .WithMany("CaseViolations")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptViolation", "Violation")
                        .WithMany("CaseViolations")
                        .HasForeignKey("ViolationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("Violation");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.ClerkSupplement", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.Organization", "Organisation")
                        .WithMany("ClerkSupplements")
                        .HasForeignKey("OrganisationId");

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.Condition", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.CaseHeader", "Case")
                        .WithMany("Conditions")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptInjury", "Injury")
                        .WithMany("Conditions")
                        .HasForeignKey("InjuryId");

                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptLightCondition", "LightCondition")
                        .WithMany("Conditions")
                        .HasForeignKey("LightConditionId");

                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptRadarType", "RadarType")
                        .WithMany("Conditions")
                        .HasForeignKey("RadarTypeId");

                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptRoadCondition", "RoadCondition")
                        .WithMany("Conditions")
                        .HasForeignKey("RoadConditionId");

                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptRoadSurface", "RoadSurface")
                        .WithMany("Conditions")
                        .HasForeignKey("RoadSurfaceId");

                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptSurface", "Surface")
                        .WithMany("Conditions")
                        .HasForeignKey("SurfaceId");

                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptWeather", "Weather")
                        .WithMany("Conditions")
                        .HasForeignKey("WeatherId");

                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptZone", "Zone")
                        .WithMany("Conditions")
                        .HasForeignKey("ZoneId");

                    b.Navigation("Case");

                    b.Navigation("Injury");

                    b.Navigation("LightCondition");

                    b.Navigation("RadarType");

                    b.Navigation("RoadCondition");

                    b.Navigation("RoadSurface");

                    b.Navigation("Surface");

                    b.Navigation("Weather");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.ConditionReasonForStop", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.Condition", "Condition")
                        .WithMany("ConditionReasonForStops")
                        .HasForeignKey("ConditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptReasonForStop", "ReasonForStop")
                        .WithMany("ConditionReasonForStops")
                        .HasForeignKey("ReasonForStopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Condition");

                    b.Navigation("ReasonForStop");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.DRECase", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.DRE.LU.DreNotified", "DreNotified")
                        .WithMany("DreCases")
                        .HasForeignKey("DreNotifiedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LEADRS_NEW_DBFirst.Models.DRE.LU.DreRequested", "DreRequested")
                        .WithMany("DreCases")
                        .HasForeignKey("DreRequestedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LEADRS_NEW_DBFirst.Models.DRE.LU.DRERole", "DreRole")
                        .WithMany("DreCases")
                        .HasForeignKey("DreRoleId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("LEADRS_NEW_DBFirst.Models.DRE.LU.DREType", "DREType")
                        .WithMany("DreCases")
                        .HasForeignKey("DreTypeId")
                        .IsRequired();

                    b.HasOne("LEADRS_NEW_DBFirst.Models.DRE.LU.DRECaseStatus", "Status")
                        .WithMany("DreCases")
                        .HasForeignKey("StatusId")
                        .IsRequired();

                    b.Navigation("DREType");

                    b.Navigation("DreNotified");

                    b.Navigation("DreRequested");

                    b.Navigation("DreRole");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.DreCaseArrestingOfficerFST", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.DRE.DRECase", "DreCase")
                        .WithOne("ArrestingOfficerFST")
                        .HasForeignKey("LEADRS_NEW_DBFirst.Models.DRE.DreCaseArrestingOfficerFST", "DRECaseId");

                    b.Navigation("DreCase");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.DreCaseArrestingOfficerInterview", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.DRE.DRECase", "DreCase")
                        .WithOne("ArrestingOfficerInterview")
                        .HasForeignKey("LEADRS_NEW_DBFirst.Models.DRE.DreCaseArrestingOfficerInterview", "DRECaseId");

                    b.Navigation("DreCase");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.DreCaseArrestingOfficerObservation", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.DRE.DRECase", "DreCase")
                        .WithOne("ArrestingOfficerObservation")
                        .HasForeignKey("LEADRS_NEW_DBFirst.Models.DRE.DreCaseArrestingOfficerObservation", "DRECaseId");

                    b.Navigation("DreCase");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.DreCaseDarkRoom", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.DRE.DRECase", "DreCase")
                        .WithOne("DarkRoom")
                        .HasForeignKey("LEADRS_NEW_DBFirst.Models.DRE.DreCaseDarkRoom", "DRECaseId");

                    b.Navigation("DreCase");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.DreCaseDefendant", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.DRE.LU.ArrestingOfficerType", "ArrestingOfficerType")
                        .WithMany("DreDefendants")
                        .HasForeignKey("ArrestingOfficerTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LEADRS_NEW_DBFirst.Models.DRE.DRECase", "DreCase")
                        .WithOne("Defendant")
                        .HasForeignKey("LEADRS_NEW_DBFirst.Models.DRE.DreCaseDefendant", "DRECaseId");

                    b.Navigation("ArrestingOfficerType");

                    b.Navigation("DreCase");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.DreCaseFingerToNose", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.DRE.DRECase", "DreCase")
                        .WithOne("FingerToNose")
                        .HasForeignKey("LEADRS_NEW_DBFirst.Models.DRE.DreCaseFingerToNose", "DRECaseId");

                    b.Navigation("DreCase");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.DreCaseHGN", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.DRE.DRECase", "DreCase")
                        .WithMany("Hgns")
                        .HasForeignKey("DRECaseId");

                    b.Navigation("DreCase");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.DreCaseImage", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.DRE.DRECase", "DreCase")
                        .WithMany("Images")
                        .HasForeignKey("DRECaseId");

                    b.Navigation("DreCase");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.DreCaseIndicator", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.DRE.DRECase", "DreCase")
                        .WithOne("Indicator")
                        .HasForeignKey("LEADRS_NEW_DBFirst.Models.DRE.DreCaseIndicator", "DRECaseId");

                    b.Navigation("DreCase");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.DreCaseIntoxSalivaScreen", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.DRE.DreCaseIntoxilyzerReport", "DreCaseIntoxilyzerReport")
                        .WithMany("DreCaseIntoxSalivaScreens")
                        .HasForeignKey("DreCaseIntoxilyzerReportId")
                        .IsRequired();

                    b.Navigation("DreCaseIntoxilyzerReport");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.DreCaseIntoxUrineScreen", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.DRE.DreCaseIntoxilyzerReport", "DreCaseIntoxilyzerReport")
                        .WithMany("DreCaseIntoxUrineScreens")
                        .HasForeignKey("DreCaseIntoxilyzerReportId")
                        .IsRequired();

                    b.Navigation("DreCaseIntoxilyzerReport");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.DreCaseIntoxilyzerReport", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.DRE.DRECase", "DreCase")
                        .WithOne("IntoxilyzerReport")
                        .HasForeignKey("LEADRS_NEW_DBFirst.Models.DRE.DreCaseIntoxilyzerReport", "DRECaseId");

                    b.Navigation("DreCase");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.DreCaseNote", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.DRE.DRECase", "DreCase")
                        .WithMany("Notes")
                        .HasForeignKey("DreCaseId")
                        .IsRequired();

                    b.HasOne("LEADRS_NEW_DBFirst.Models.DRE.DreCaseNoteType", "DreCaseNoteType")
                        .WithMany("DreCaseNotes")
                        .HasForeignKey("DreCaseNoteTypeId")
                        .IsRequired();

                    b.Navigation("DreCase");

                    b.Navigation("DreCaseNoteType");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.DreCaseNoteType", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.DRE.DreCasePage", "DreCasePage")
                        .WithMany("DreCaseNoteTypes")
                        .HasForeignKey("DreCasePageId")
                        .IsRequired();

                    b.Navigation("DreCasePage");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.DreCaseObservations", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.DRE.DRECase", "DreCase")
                        .WithOne("Observations")
                        .HasForeignKey("LEADRS_NEW_DBFirst.Models.DRE.DreCaseObservations", "DRECaseId");

                    b.Navigation("DreCase");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.DreCaseOffense", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.DRE.DRECase", "DreCase")
                        .WithOne("Offense")
                        .HasForeignKey("LEADRS_NEW_DBFirst.Models.DRE.DreCaseOffense", "DRECaseId");

                    b.Navigation("DreCase");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.DreCaseOneLegStand", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.DRE.DRECase", "DreCase")
                        .WithOne("OneLegStand")
                        .HasForeignKey("LEADRS_NEW_DBFirst.Models.DRE.DreCaseOneLegStand", "DRECaseId");

                    b.Navigation("DreCase");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.DreCaseOtherObservation", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.DRE.DRECase", "DreCase")
                        .WithOne("OtherObservation")
                        .HasForeignKey("LEADRS_NEW_DBFirst.Models.DRE.DreCaseOtherObservation", "DRECaseId");

                    b.Navigation("DreCase");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.DreCaseOtherOfficer", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.DRE.DRECase", "DreCase")
                        .WithMany("OtherOfficers")
                        .HasForeignKey("DRECaseId");

                    b.HasOne("LEADRS_NEW_DBFirst.Models.DRE.LU.DRERole", "DRERole")
                        .WithMany("DreCasesOtherOfficers")
                        .HasForeignKey("DreRoleId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("DRERole");

                    b.Navigation("DreCase");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.DreCasePicture", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.DRE.DRECase", "DreCase")
                        .WithMany("Pictures")
                        .HasForeignKey("DRECaseId");

                    b.Navigation("DreCase");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.DreCaseRombergBalance", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.DRE.DRECase", "DreCase")
                        .WithOne("RombergBalance")
                        .HasForeignKey("LEADRS_NEW_DBFirst.Models.DRE.DreCaseRombergBalance", "DRECaseId");

                    b.Navigation("DreCase");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.DreCaseToxSpec", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.DRE.DRECase", "DreCase")
                        .WithMany("ToxSpecs")
                        .HasForeignKey("DRECaseId");

                    b.HasOne("LEADRS_NEW_DBFirst.Models.DRE.LU.DreCaseToxSpecType", "DreCaseToxSpecType")
                        .WithMany("DreCaseToxSpecs")
                        .HasForeignKey("DreCaseToxSpecTypeToxSpecTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DreCase");

                    b.Navigation("DreCaseToxSpecType");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.DreCaseToxicologyDrug", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.DRE.DRECase", "DreCase")
                        .WithMany("ToxicologyDrugs")
                        .HasForeignKey("DRECaseId");

                    b.HasOne("LEADRS_NEW_DBFirst.Models.DRE.DreCaseToxSpec", "DreCaseToxSpec")
                        .WithMany("DreCaseToxicologyDrugs")
                        .HasForeignKey("DreCaseToxSpecId");

                    b.Navigation("DreCase");

                    b.Navigation("DreCaseToxSpec");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.DreCaseVideo", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.DRE.DRECase", "DreCase")
                        .WithMany("Videos")
                        .HasForeignKey("DRECaseId");

                    b.Navigation("DreCase");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.DreCaseVitalSign", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.DRE.DRECase", "DreCase")
                        .WithOne("VitalSign")
                        .HasForeignKey("LEADRS_NEW_DBFirst.Models.DRE.DreCaseVitalSign", "DRECaseId");

                    b.Navigation("DreCase");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.DreCaseWalkTurn", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.DRE.DRECase", "DreCase")
                        .WithOne("WalkTurn")
                        .HasForeignKey("LEADRS_NEW_DBFirst.Models.DRE.DreCaseWalkTurn", "DRECaseId");

                    b.Navigation("DreCase");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.Defendant", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.CaseHeader", "Case")
                        .WithMany("Defendants")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptState", "DlState")
                        .WithMany("Defendants")
                        .HasForeignKey("DlStateId");

                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptEducation", "Education")
                        .WithMany("Defendants")
                        .HasForeignKey("EducationId");

                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptEthnicity", "Ethnicity")
                        .WithMany("Defendants")
                        .HasForeignKey("EthnicityId");

                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptEyeColor", "EyeColor")
                        .WithMany("Defendants")
                        .HasForeignKey("EyeColorId");

                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptGender", "Gender")
                        .WithMany("Defendants")
                        .HasForeignKey("GenderId");

                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptHairColor", "HairColor")
                        .WithMany("Defendants")
                        .HasForeignKey("HairColorId");

                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptRace", "Race")
                        .WithMany("Defendants")
                        .HasForeignKey("RaceId");

                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptSkinComplexion", "SkinComplexionSkin")
                        .WithMany("Defendants")
                        .HasForeignKey("SkinComplexionSkinId");

                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptStepGrantType", "StepGrantType")
                        .WithMany("Defendants")
                        .HasForeignKey("StepGrantTypeId");

                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptZone", "Zone")
                        .WithMany("Defendants")
                        .HasForeignKey("ZoneId");

                    b.Navigation("Case");

                    b.Navigation("DlState");

                    b.Navigation("Education");

                    b.Navigation("Ethnicity");

                    b.Navigation("EyeColor");

                    b.Navigation("Gender");

                    b.Navigation("HairColor");

                    b.Navigation("Race");

                    b.Navigation("SkinComplexionSkin");

                    b.Navigation("StepGrantType");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DefendantAdditionalInfo", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.Defendant", "Defendant")
                        .WithOne("DefendantAdditionalInfo")
                        .HasForeignKey("LEADRS_NEW_DBFirst.Models.DefendantAdditionalInfo", "DefendantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Defendant");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DefendantAddress", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptAddressGroup", "AddressGroup")
                        .WithMany("DefendantAddresses")
                        .HasForeignKey("AddressGroupId");

                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptCounty", "County")
                        .WithMany("DefendantAddresses")
                        .HasForeignKey("CountyId");

                    b.HasOne("LEADRS_NEW_DBFirst.Models.Defendant", "Defendant")
                        .WithMany("DefendantAddresses")
                        .HasForeignKey("DefendantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptState", "EmState")
                        .WithMany("DefendantAddressEmStates")
                        .HasForeignKey("EmStateId");

                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptState", "OccState")
                        .WithMany("DefendantAddressOccStates")
                        .HasForeignKey("OccStateId");

                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptState", "State")
                        .WithMany("DefendantAddressStates")
                        .HasForeignKey("StateId");

                    b.Navigation("AddressGroup");

                    b.Navigation("County");

                    b.Navigation("Defendant");

                    b.Navigation("EmState");

                    b.Navigation("OccState");

                    b.Navigation("State");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DefendantEmContact", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptAddressGroup", "AddressGroup")
                        .WithMany("DefendantEmContacts")
                        .HasForeignKey("AddressGroupId");

                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptCounty", "County")
                        .WithMany("DefendantEmContacts")
                        .HasForeignKey("CountyId");

                    b.HasOne("LEADRS_NEW_DBFirst.Models.Defendant", "Defendant")
                        .WithMany("DefendantEmContacts")
                        .HasForeignKey("DefendantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptState", "State")
                        .WithMany("DefendantEmContacts")
                        .HasForeignKey("StateId");

                    b.Navigation("AddressGroup");

                    b.Navigation("County");

                    b.Navigation("Defendant");

                    b.Navigation("State");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DefendantInterview", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.Defendant", "Defendant")
                        .WithOne("DefendantInterview")
                        .HasForeignKey("LEADRS_NEW_DBFirst.Models.DefendantInterview", "DefendantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Defendant");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DefendantInterviewQuestion", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.DefendantInterview", "DefendantInterview")
                        .WithMany("DefendantInterviewQuestions")
                        .HasForeignKey("DefendantInterviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptInterviewQuestion", "InterviewQuestion")
                        .WithMany("DefendantInterviewQuestions")
                        .HasForeignKey("InterviewQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DefendantInterview");

                    b.Navigation("InterviewQuestion");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DefendantObservation", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptAlcoholType", "AlcoholType")
                        .WithMany("DefendantObservations")
                        .HasForeignKey("AlcoholTypeId");

                    b.HasOne("LEADRS_NEW_DBFirst.Models.Defendant", "Defendant")
                        .WithOne("DefendantObservation")
                        .HasForeignKey("LEADRS_NEW_DBFirst.Models.DefendantObservation", "DefendantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AlcoholType");

                    b.Navigation("Defendant");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DefendantOccupationAddress", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptState", "State")
                        .WithMany("DefendantOccupationAddresses")
                        .HasForeignKey("StateId");

                    b.Navigation("State");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DefendantPhone", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.Defendant", "Defendant")
                        .WithMany("DefendantPhones")
                        .HasForeignKey("DefendantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptPhoneType", "PhoneType")
                        .WithMany("DefendantPhones")
                        .HasForeignKey("PhoneTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Defendant");

                    b.Navigation("PhoneType");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DefendantStatement", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptAddressGroup", "AddressGroup")
                        .WithMany("DefendantStatements")
                        .HasForeignKey("AddressGroupId");

                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptCounty", "County")
                        .WithMany("DefendantStatements")
                        .HasForeignKey("CountyId");

                    b.HasOne("LEADRS_NEW_DBFirst.Models.Defendant", "Defendant")
                        .WithOne("DefendantStatement")
                        .HasForeignKey("LEADRS_NEW_DBFirst.Models.DefendantStatement", "DefendantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptState", "State")
                        .WithMany("DefendantStatements")
                        .HasForeignKey("StateId");

                    b.Navigation("AddressGroup");

                    b.Navigation("County");

                    b.Navigation("Defendant");

                    b.Navigation("State");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.Document", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptDocumentType", "DocumentType")
                        .WithMany("Documents")
                        .HasForeignKey("DocumentTypeId");

                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptDocumentFileType", "FileType")
                        .WithMany("Documents")
                        .HasForeignKey("FileTypeId");

                    b.Navigation("DocumentType");

                    b.Navigation("FileType");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DuiCaseNote", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.CaseHeader", "DuiCase")
                        .WithMany("DuiCaseNotes")
                        .HasForeignKey("DuiCaseId")
                        .IsRequired();

                    b.Navigation("DuiCase");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DuiCaseNoteType", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.SystemPage", "DuiCasePage")
                        .WithMany("DuiCaseNoteTypes")
                        .HasForeignKey("DuiCasePageId")
                        .IsRequired();

                    b.Navigation("DuiCasePage");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.EvidenceDocument", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.CaseHeader", "Case")
                        .WithMany("EvidenceDocuments")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LEADRS_NEW_DBFirst.Models.Document", "Document")
                        .WithMany("EvidenceDocuments")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.EvidenceRecording", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.PhysicalEvidence", "PhysicalEvidence")
                        .WithMany("EvidenceRecordings")
                        .HasForeignKey("PhysicalEvidenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PhysicalEvidence");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.FieldSobrietyTest", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.CaseHeader", "Case")
                        .WithMany("FieldSobrietyTests")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.FstFingerToNoseTest", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.CaseHeader", "Case")
                        .WithMany("FstFingerToNoseTests")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.FstHandCoordination", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.CaseHeader", "Case")
                        .WithMany("FstHandCoordinations")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.FstHgntest", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.CaseHeader", "Case")
                        .WithMany("FstHgntests")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.FstOneLegStandTest", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.CaseHeader", "Case")
                        .WithMany("FstOneLegStandTests")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptFootWearType", "FootWear")
                        .WithMany("FstOneLegStandTests")
                        .HasForeignKey("FootWearId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Case");

                    b.Navigation("FootWear");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.FstOtherTest", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.CaseHeader", "Case")
                        .WithMany("FstOtherTests")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.FstPalmPatTest", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.CaseHeader", "Case")
                        .WithMany("FstPalmPatTests")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.FstWalkAndTurnTest", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.CaseHeader", "Case")
                        .WithMany("FstWalkAndTurnTests")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.JobParameter", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.Job", "Job")
                        .WithMany("JobParameters")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_HangFire_JobParameter_Job");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.JudgeCourtType", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.LuCourtType", "CourtType")
                        .WithMany("JudgeCourtTypes")
                        .HasForeignKey("CourtTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LEADRS_NEW_DBFirst.Models.Judge", "Judge")
                        .WithMany("JudgeCourtTypes")
                        .HasForeignKey("JudgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourtType");

                    b.Navigation("Judge");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.OfficerStepShift", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptStepGrantType", "StepGrantType")
                        .WithMany("OfficerStepShifts")
                        .HasForeignKey("StepGrantTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("LEADRS_NEW_DBFirst.Models.StepShift", "StepShift")
                        .WithMany("OfficerStepShifts")
                        .HasForeignKey("StepShiftId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("StepGrantType");

                    b.Navigation("StepShift");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.Organization", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.OrganizationLocation", "OrganizationMainLocationIdFkNavigation")
                        .WithMany("Organizations")
                        .HasForeignKey("OrganizationMainLocationIdFk");

                    b.Navigation("OrganizationMainLocationIdFkNavigation");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.OtherOfficer", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.CaseHeader", "Case")
                        .WithMany("OtherOfficers")
                        .HasForeignKey("CaseId")
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.PhysicalEvidence", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.CaseHeader", "Case")
                        .WithMany("PhysicalEvidences")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.ReportForm", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.ReportGroup", "ReportGroup")
                        .WithMany("ReportForms")
                        .HasForeignKey("ReportGroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ReportGroup");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.RoleClaim", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.Role", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.SigningRequest", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.SigningTemplate", "SigningTemplate")
                        .WithMany("SigningRequests")
                        .HasForeignKey("SigningTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptSigningStatus", "Status")
                        .WithMany("SigningRequests")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SigningTemplate");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.SigningRequestReport", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.ReportForm", "Report")
                        .WithMany("SigningRequestReports")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LEADRS_NEW_DBFirst.Models.SigningRequest", "SigningRequest")
                        .WithMany("SigningRequestReports")
                        .HasForeignKey("SigningRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptSigningStatus", "Status")
                        .WithMany("SigningRequestReports")
                        .HasForeignKey("StatusId");

                    b.Navigation("Report");

                    b.Navigation("SigningRequest");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.SigningRequestReportAction", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptSigningAction", "SigningAction")
                        .WithMany("SigningRequestReportActions")
                        .HasForeignKey("SigningActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LEADRS_NEW_DBFirst.Models.SigningRequestReport", "SigningRequestReport")
                        .WithMany("SigningRequestReportActions")
                        .HasForeignKey("SigningRequestReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LEADRS_NEW_DBFirst.Models.SigningRequestSigner", "SigningRequestSigner")
                        .WithMany("SigningRequestReportActions")
                        .HasForeignKey("SigningRequestSignerId");

                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptSigningStatus", "Status")
                        .WithMany("SigningRequestReportActions")
                        .HasForeignKey("StatusId");

                    b.Navigation("SigningAction");

                    b.Navigation("SigningRequestReport");

                    b.Navigation("SigningRequestSigner");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.SigningRequestSigner", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptSignerType", "SignerType")
                        .WithMany("SigningRequestSigners")
                        .HasForeignKey("SignerTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LEADRS_NEW_DBFirst.Models.SigningRequest", "SigningRequest")
                        .WithMany("SigningRequestSigners")
                        .HasForeignKey("SigningRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SignerType");

                    b.Navigation("SigningRequest");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.SigningTemplateReport", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.ReportForm", "ReportForm")
                        .WithMany("SigningTemplateReports")
                        .HasForeignKey("ReportFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LEADRS_NEW_DBFirst.Models.SigningTemplate", "SigningTemplate")
                        .WithMany("SigningTemplateReports")
                        .HasForeignKey("SigningTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReportForm");

                    b.Navigation("SigningTemplate");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.SigningTemplateReportAction", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptSigningAction", "SignerAction")
                        .WithMany("SigningTemplateReportActions")
                        .HasForeignKey("SignerActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptSignerType", "SignerType")
                        .WithMany("SigningTemplateReportActions")
                        .HasForeignKey("SignerTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LEADRS_NEW_DBFirst.Models.SigningTemplateReport", "SigningTemplateReport")
                        .WithMany("SigningTemplateReportActions")
                        .HasForeignKey("SigningTemplateReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SignerAction");

                    b.Navigation("SignerType");

                    b.Navigation("SigningTemplateReport");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.SigningTemplateSigner", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptSignerType", "SignerType")
                        .WithMany("SigningTemplateSigners")
                        .HasForeignKey("SignerTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LEADRS_NEW_DBFirst.Models.SigningTemplate", "SigningTemplate")
                        .WithMany("SigningTemplateSigners")
                        .HasForeignKey("SigningTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SignerType");

                    b.Navigation("SigningTemplate");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.SpecimenBloodTest", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptEmployedPwd", "Employed")
                        .WithMany("SpecimenBloodTests")
                        .HasForeignKey("EmployedId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptMoreLessIntoxicated", "MoreLessIntox")
                        .WithMany("SpecimenBloodTests")
                        .HasForeignKey("MoreLessIntoxId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LEADRS_NEW_DBFirst.Models.SpecimenReport", "SpecimenReport")
                        .WithMany("SpecimenBloodTests")
                        .HasForeignKey("SpecimenReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employed");

                    b.Navigation("MoreLessIntox");

                    b.Navigation("SpecimenReport");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.SpecimenBreathTest", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptMoreLessIntoxicated", "MoreLessIntox")
                        .WithMany("SpecimenBreathTests")
                        .HasForeignKey("MoreLessIntoxId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LEADRS_NEW_DBFirst.Models.SpecimenReport", "SpecimenReport")
                        .WithMany("SpecimenBreathTests")
                        .HasForeignKey("SpecimenReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptIntoxVerifyTemp", "VerifyTemp")
                        .WithMany("SpecimenBreathTests")
                        .HasForeignKey("VerifyTempId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("MoreLessIntox");

                    b.Navigation("SpecimenReport");

                    b.Navigation("VerifyTemp");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.SpecimenReport", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.CaseHeader", "Case")
                        .WithMany("SpecimenReports")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.SpecimenUrineTest", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptMoreLessIntoxicated", "MoreLessIntox")
                        .WithMany("SpecimenUrineTests")
                        .HasForeignKey("MoreLessIntoxId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LEADRS_NEW_DBFirst.Models.SpecimenReport", "SpecimenReport")
                        .WithMany("SpecimenUrineTests")
                        .HasForeignKey("SpecimenReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MoreLessIntox");

                    b.Navigation("SpecimenReport");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.State", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.Job", "Job")
                        .WithMany("States")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_HangFire_State_Job");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.StepOfficerShiftCase", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.CaseHeader", "Case")
                        .WithMany("StepOfficerShiftCases")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LEADRS_NEW_DBFirst.Models.OfficerStepShift", "StepOfficerShift")
                        .WithMany("StepOfficerShiftCases")
                        .HasForeignKey("StepOfficerShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("StepOfficerShift");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.StepOfficerShiftZone", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.OfficerStepShift", "OfficerStepShift")
                        .WithMany("StepOfficerShiftZones")
                        .HasForeignKey("OfficerStepShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LEADRS_NEW_DBFirst.Models.StepZone", "StepZone")
                        .WithMany("StepOfficerShiftZones")
                        .HasForeignKey("StepZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OfficerStepShift");

                    b.Navigation("StepZone");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.StepShift", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptStepGrantType", "StepGrantType")
                        .WithMany("StepShifts")
                        .HasForeignKey("StepGrantTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("StepGrantType");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.StepZone", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptStepGrantType", "StepGrantType")
                        .WithMany("StepZones")
                        .HasForeignKey("StepGrantTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("StepGrantType");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.SystemModeControl", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptSystemMode", "Mode")
                        .WithMany("SystemModeControls")
                        .HasForeignKey("ModeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("LEADRS_NEW_DBFirst.Models.SystemPage", "Page")
                        .WithMany("SystemModeControls")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Mode");

                    b.Navigation("Page");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptSystemMode", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptNcicTransportMode", "NcicTransportMode")
                        .WithMany("TblOptSystemModes")
                        .HasForeignKey("NcicTransportModeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptOffenseType", "OffenseType")
                        .WithMany("TblOptSystemModes")
                        .HasForeignKey("OffenseTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("NcicTransportMode");

                    b.Navigation("OffenseType");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.User", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.Organization", "Organization")
                        .WithMany("Users")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.UserClaim", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.User", "User")
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.UserLogin", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.User", "User")
                        .WithMany("UserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.UserToRole", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.RolesToPermission", "RoleNameNavigation")
                        .WithMany("UserToRoles")
                        .HasForeignKey("RoleName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoleNameNavigation");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.UserToken", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.User", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.VehicleWatercraft", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptBwiMotor", "Motor")
                        .WithMany("VehicleWatercrafts")
                        .HasForeignKey("MotorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("LEADRS_NEW_DBFirst.Models.CaseVehicle", "Vehicle")
                        .WithOne("VehicleWatercraft")
                        .HasForeignKey("LEADRS_NEW_DBFirst.Models.VehicleWatercraft", "VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptBwiVessel", "Vessel")
                        .WithMany("VehicleWatercrafts")
                        .HasForeignKey("VesselId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Motor");

                    b.Navigation("Vehicle");

                    b.Navigation("Vessel");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.VehicleWatercraftOwner", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptAddressGroup", "AddressGroup")
                        .WithMany("VehicleWatercraftOwners")
                        .HasForeignKey("AddressGroupId");

                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptCounty", "County")
                        .WithMany("VehicleWatercraftOwners")
                        .HasForeignKey("CountyId");

                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptState", "State")
                        .WithMany("VehicleWatercraftOwners")
                        .HasForeignKey("StateId");

                    b.HasOne("LEADRS_NEW_DBFirst.Models.CaseVehicle", "Vehicle")
                        .WithOne("VehicleWatercraftOwner")
                        .HasForeignKey("LEADRS_NEW_DBFirst.Models.VehicleWatercraftOwner", "VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddressGroup");

                    b.Navigation("County");

                    b.Navigation("State");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.Witness", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptAddressGroup", "AddressGroup")
                        .WithMany("Witnesses")
                        .HasForeignKey("AddressGroupId");

                    b.HasOne("LEADRS_NEW_DBFirst.Models.CaseHeader", "Case")
                        .WithMany("Witnesses")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptCounty", "County")
                        .WithMany("Witnesses")
                        .HasForeignKey("CountyId");

                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptState", "DlState")
                        .WithMany("WitnessDlStates")
                        .HasForeignKey("DlStateId");

                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptGender", "Gender")
                        .WithMany("Witnesses")
                        .HasForeignKey("GenderId");

                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptRace", "Race")
                        .WithMany("Witnesses")
                        .HasForeignKey("RaceId");

                    b.HasOne("LEADRS_NEW_DBFirst.Models.TblOptState", "State")
                        .WithMany("WitnessStates")
                        .HasForeignKey("StateId");

                    b.Navigation("AddressGroup");

                    b.Navigation("Case");

                    b.Navigation("County");

                    b.Navigation("DlState");

                    b.Navigation("Gender");

                    b.Navigation("Race");

                    b.Navigation("State");
                });

            modelBuilder.Entity("OrganizationCourtType", b =>
                {
                    b.HasOne("LEADRS_NEW_DBFirst.Models.LuCourtType", null)
                        .WithMany()
                        .HasForeignKey("CourtTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LEADRS_NEW_DBFirst.Models.Organization", null)
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.CaseHeader", b =>
                {
                    b.Navigation("CaseOffenses");

                    b.Navigation("CaseVehicles");

                    b.Navigation("CaseViolations");

                    b.Navigation("Conditions");

                    b.Navigation("Defendants");

                    b.Navigation("DuiCaseNotes");

                    b.Navigation("EvidenceDocuments");

                    b.Navigation("FieldSobrietyTests");

                    b.Navigation("FstFingerToNoseTests");

                    b.Navigation("FstHandCoordinations");

                    b.Navigation("FstHgntests");

                    b.Navigation("FstOneLegStandTests");

                    b.Navigation("FstOtherTests");

                    b.Navigation("FstPalmPatTests");

                    b.Navigation("FstWalkAndTurnTests");

                    b.Navigation("OtherOfficers");

                    b.Navigation("PhysicalEvidences");

                    b.Navigation("SpecimenReports");

                    b.Navigation("StepOfficerShiftCases");

                    b.Navigation("Witnesses");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.CaseOffense", b =>
                {
                    b.Navigation("AdditionalOffenses");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.CaseVehicle", b =>
                {
                    b.Navigation("CaseVehiclePassengers");

                    b.Navigation("VehicleWatercraft");

                    b.Navigation("VehicleWatercraftOwner");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.Condition", b =>
                {
                    b.Navigation("ConditionReasonForStops");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.DRECase", b =>
                {
                    b.Navigation("ArrestingOfficerFST");

                    b.Navigation("ArrestingOfficerInterview")
                        .IsRequired();

                    b.Navigation("ArrestingOfficerObservation")
                        .IsRequired();

                    b.Navigation("DarkRoom")
                        .IsRequired();

                    b.Navigation("Defendant")
                        .IsRequired();

                    b.Navigation("FingerToNose");

                    b.Navigation("Hgns");

                    b.Navigation("Images");

                    b.Navigation("Indicator");

                    b.Navigation("IntoxilyzerReport")
                        .IsRequired();

                    b.Navigation("Notes");

                    b.Navigation("Observations")
                        .IsRequired();

                    b.Navigation("Offense");

                    b.Navigation("OneLegStand")
                        .IsRequired();

                    b.Navigation("OtherObservation")
                        .IsRequired();

                    b.Navigation("OtherOfficers");

                    b.Navigation("Pictures");

                    b.Navigation("RombergBalance")
                        .IsRequired();

                    b.Navigation("ToxSpecs");

                    b.Navigation("ToxicologyDrugs");

                    b.Navigation("Videos");

                    b.Navigation("VitalSign")
                        .IsRequired();

                    b.Navigation("WalkTurn")
                        .IsRequired();
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.DreCaseIntoxilyzerReport", b =>
                {
                    b.Navigation("DreCaseIntoxSalivaScreens");

                    b.Navigation("DreCaseIntoxUrineScreens");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.DreCaseNoteType", b =>
                {
                    b.Navigation("DreCaseNotes");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.DreCasePage", b =>
                {
                    b.Navigation("DreCaseNoteTypes");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.DreCaseToxSpec", b =>
                {
                    b.Navigation("DreCaseToxicologyDrugs");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.LU.ArrestingOfficerType", b =>
                {
                    b.Navigation("DreDefendants");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.LU.DRECaseStatus", b =>
                {
                    b.Navigation("DreCases");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.LU.DRERole", b =>
                {
                    b.Navigation("DreCases");

                    b.Navigation("DreCasesOtherOfficers");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.LU.DREType", b =>
                {
                    b.Navigation("DreCases");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.LU.DreCaseToxSpecType", b =>
                {
                    b.Navigation("DreCaseToxSpecs");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.LU.DreNotified", b =>
                {
                    b.Navigation("DreCases");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DRE.LU.DreRequested", b =>
                {
                    b.Navigation("DreCases");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.Defendant", b =>
                {
                    b.Navigation("DefendantAdditionalInfo");

                    b.Navigation("DefendantAddresses");

                    b.Navigation("DefendantEmContacts");

                    b.Navigation("DefendantInterview");

                    b.Navigation("DefendantObservation");

                    b.Navigation("DefendantPhones");

                    b.Navigation("DefendantStatement");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.DefendantInterview", b =>
                {
                    b.Navigation("DefendantInterviewQuestions");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.Document", b =>
                {
                    b.Navigation("EvidenceDocuments");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.Job", b =>
                {
                    b.Navigation("JobParameters");

                    b.Navigation("States");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.Judge", b =>
                {
                    b.Navigation("JudgeCourtTypes");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.LuCourtType", b =>
                {
                    b.Navigation("JudgeCourtTypes");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.OfficerStepShift", b =>
                {
                    b.Navigation("StepOfficerShiftCases");

                    b.Navigation("StepOfficerShiftZones");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.Organization", b =>
                {
                    b.Navigation("CaseOutcomes");

                    b.Navigation("ClerkSupplements");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.OrganizationLocation", b =>
                {
                    b.Navigation("Organizations");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.PhysicalEvidence", b =>
                {
                    b.Navigation("EvidenceRecordings");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.ReportForm", b =>
                {
                    b.Navigation("SigningRequestReports");

                    b.Navigation("SigningTemplateReports");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.ReportGroup", b =>
                {
                    b.Navigation("ReportForms");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.Role", b =>
                {
                    b.Navigation("RoleClaims");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.RolesToPermission", b =>
                {
                    b.Navigation("UserToRoles");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.SigningRequest", b =>
                {
                    b.Navigation("SigningRequestReports");

                    b.Navigation("SigningRequestSigners");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.SigningRequestReport", b =>
                {
                    b.Navigation("SigningRequestReportActions");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.SigningRequestSigner", b =>
                {
                    b.Navigation("SigningRequestReportActions");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.SigningTemplate", b =>
                {
                    b.Navigation("SigningRequests");

                    b.Navigation("SigningTemplateReports");

                    b.Navigation("SigningTemplateSigners");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.SigningTemplateReport", b =>
                {
                    b.Navigation("SigningTemplateReportActions");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.SpecimenReport", b =>
                {
                    b.Navigation("SpecimenBloodTests");

                    b.Navigation("SpecimenBreathTests");

                    b.Navigation("SpecimenUrineTests");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.StepShift", b =>
                {
                    b.Navigation("OfficerStepShifts");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.StepZone", b =>
                {
                    b.Navigation("StepOfficerShiftZones");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.SystemPage", b =>
                {
                    b.Navigation("DuiCaseNoteTypes");

                    b.Navigation("SystemModeControls");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptAddressGroup", b =>
                {
                    b.Navigation("CaseOffenseArrestAddressGroups");

                    b.Navigation("CaseOffenseOffAddressGroups");

                    b.Navigation("CaseVehiclePassengers");

                    b.Navigation("DefendantAddresses");

                    b.Navigation("DefendantEmContacts");

                    b.Navigation("DefendantStatements");

                    b.Navigation("VehicleWatercraftOwners");

                    b.Navigation("Witnesses");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptAlcoholType", b =>
                {
                    b.Navigation("DefendantObservations");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptBwiMotor", b =>
                {
                    b.Navigation("VehicleWatercrafts");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptBwiVessel", b =>
                {
                    b.Navigation("VehicleWatercrafts");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptCounty", b =>
                {
                    b.Navigation("CaseOffenseArrestCounties");

                    b.Navigation("CaseOffenseOffCounties");

                    b.Navigation("CaseVehiclePassengers");

                    b.Navigation("DefendantAddresses");

                    b.Navigation("DefendantEmContacts");

                    b.Navigation("DefendantStatements");

                    b.Navigation("VehicleWatercraftOwners");

                    b.Navigation("Witnesses");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptDocumentFileType", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptDocumentType", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptEducation", b =>
                {
                    b.Navigation("Defendants");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptEmployedPwd", b =>
                {
                    b.Navigation("SpecimenBloodTests");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptEthnicity", b =>
                {
                    b.Navigation("Defendants");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptEyeColor", b =>
                {
                    b.Navigation("Defendants");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptFootWearType", b =>
                {
                    b.Navigation("FstOneLegStandTests");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptGender", b =>
                {
                    b.Navigation("CaseVehiclePassengers");

                    b.Navigation("Defendants");

                    b.Navigation("Witnesses");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptHairColor", b =>
                {
                    b.Navigation("Defendants");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptInjury", b =>
                {
                    b.Navigation("Conditions");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptInterviewQuestion", b =>
                {
                    b.Navigation("DefendantInterviewQuestions");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptIntoxVerifyTemp", b =>
                {
                    b.Navigation("SpecimenBreathTests");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptLightCondition", b =>
                {
                    b.Navigation("Conditions");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptMoreLessIntoxicated", b =>
                {
                    b.Navigation("SpecimenBloodTests");

                    b.Navigation("SpecimenBreathTests");

                    b.Navigation("SpecimenUrineTests");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptNcicColor", b =>
                {
                    b.Navigation("CaseVehicles");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptNcicTransportMake", b =>
                {
                    b.Navigation("CaseVehicles");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptNcicTransportMode", b =>
                {
                    b.Navigation("TblOptSystemModes");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptNcicTransportType", b =>
                {
                    b.Navigation("CaseVehicles");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptNcicVehcileStyleType", b =>
                {
                    b.Navigation("CaseVehicles");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptNcicVehicleBodyStyle", b =>
                {
                    b.Navigation("CaseVehicles");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptNcicVehicleModel", b =>
                {
                    b.Navigation("CaseVehicles");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptOffense", b =>
                {
                    b.Navigation("CaseOffenses");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptOffenseType", b =>
                {
                    b.Navigation("TblOptSystemModes");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptPhoneType", b =>
                {
                    b.Navigation("DefendantPhones");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptRace", b =>
                {
                    b.Navigation("CaseVehiclePassengers");

                    b.Navigation("Defendants");

                    b.Navigation("Witnesses");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptRadarType", b =>
                {
                    b.Navigation("Conditions");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptReasonForStop", b =>
                {
                    b.Navigation("ConditionReasonForStops");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptRoadCondition", b =>
                {
                    b.Navigation("Conditions");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptRoadSurface", b =>
                {
                    b.Navigation("Conditions");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptSignerType", b =>
                {
                    b.Navigation("SigningRequestSigners");

                    b.Navigation("SigningTemplateReportActions");

                    b.Navigation("SigningTemplateSigners");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptSigningAction", b =>
                {
                    b.Navigation("SigningRequestReportActions");

                    b.Navigation("SigningTemplateReportActions");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptSigningStatus", b =>
                {
                    b.Navigation("SigningRequestReportActions");

                    b.Navigation("SigningRequestReports");

                    b.Navigation("SigningRequests");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptSkinComplexion", b =>
                {
                    b.Navigation("Defendants");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptState", b =>
                {
                    b.Navigation("CaseOffenseArrestStates");

                    b.Navigation("CaseOffenseOffStates");

                    b.Navigation("CaseVehiclePassengers");

                    b.Navigation("CaseVehicles");

                    b.Navigation("DefendantAddressEmStates");

                    b.Navigation("DefendantAddressOccStates");

                    b.Navigation("DefendantAddressStates");

                    b.Navigation("DefendantEmContacts");

                    b.Navigation("DefendantOccupationAddresses");

                    b.Navigation("DefendantStatements");

                    b.Navigation("Defendants");

                    b.Navigation("VehicleWatercraftOwners");

                    b.Navigation("WitnessDlStates");

                    b.Navigation("WitnessStates");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptStatus", b =>
                {
                    b.Navigation("CaseHeaders");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptStepGrantType", b =>
                {
                    b.Navigation("Defendants");

                    b.Navigation("OfficerStepShifts");

                    b.Navigation("StepShifts");

                    b.Navigation("StepZones");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptSurface", b =>
                {
                    b.Navigation("Conditions");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptSystemMode", b =>
                {
                    b.Navigation("CaseHeaders");

                    b.Navigation("SystemModeControls");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptViolation", b =>
                {
                    b.Navigation("CaseViolations");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptWeather", b =>
                {
                    b.Navigation("Conditions");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.TblOptZone", b =>
                {
                    b.Navigation("Conditions");

                    b.Navigation("Defendants");
                });

            modelBuilder.Entity("LEADRS_NEW_DBFirst.Models.User", b =>
                {
                    b.Navigation("UserClaims");

                    b.Navigation("UserLogins");

                    b.Navigation("UserTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
